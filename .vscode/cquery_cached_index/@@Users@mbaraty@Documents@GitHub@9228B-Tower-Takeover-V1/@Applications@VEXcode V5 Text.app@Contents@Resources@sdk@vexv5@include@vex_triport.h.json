15
{"last_modification_time":1564537715,"language":2,"import_file":"/Users/mbaraty/Documents/GitHub/9228B-Tower-Takeover-V1/include/controller.h","args":["clang","-working-directory=/Users/mbaraty/Documents/GitHub/9228B-Tower-Takeover-V1","-xc++","/Users/mbaraty/Documents/GitHub/9228B-Tower-Takeover-V1/include/controller.h","-include","v5_vcs.h","--target=thumbv7-none-eabi","-U","__INT32_TYPE__","-U","__UINT32_TYPE__","-D","__INT32_TYPE__=long","-D","__UINT32_TYPE__=unsigned long","-std=gnu++11","-I","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include","-I","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/clang/8.0.0/include","-I","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include","-I","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3","-I","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/arm-none-eabi/armv7-ar/thumb","-resource-dir=/usr/local/Cellar/llvm/6.0.1/lib/clang/6.0.1","-Wno-unknown-warning-option","-fparse-all-comments","-isystem/usr/local/include","-isystem/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/11.0.0/include","-isysteminclude"],"includes":[],"dependencies":["/Users/mbaraty/Documents/GitHub/9228B-Tower-Takeover-V1/include/controller.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/v5_vcs.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/v5_api.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/clang/8.0.0/include/stdint.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/stdint.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/machine/_default_types.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/_intsup.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/_stdint.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/v5_apitypes.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/v5_apiuser.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_thread.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/chrono","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/ratio","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/type_traits","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/arm-none-eabi/armv7-ar/thumb/bits/c++config.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/cstdint","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/limits","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/ctime","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/time.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/_ansi.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/config.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/reent.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/clang/8.0.0/include/stddef.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/_types.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/machine/_types.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/lock.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/types.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/cdefs.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/timespec.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/_timespec.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_device.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_controller.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/functional","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/stl_function.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/typeinfo","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/exception","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/exception_ptr.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/nested_exception.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/hash_bytes.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/new","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/tuple","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/utility","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/stl_pair.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/move.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/concept_check.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/initializer_list","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/array","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/stdexcept","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/string","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/stringfwd.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/memoryfwd.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/char_traits.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/stl_algobase.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/functexcept.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/cpp_type_traits.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/ext/type_traits.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/ext/numeric_traits.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/stl_iterator_base_types.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/stl_iterator_base_funcs.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/stl_iterator.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/ptr_traits.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/postypes.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/cwchar","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/wchar.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/allocator.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/arm-none-eabi/armv7-ar/thumb/bits/c++allocator.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/ext/new_allocator.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/localefwd.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/arm-none-eabi/armv7-ar/thumb/bits/c++locale.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/clocale","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/locale.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/iosfwd","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/cctype","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/ctype.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/ostream_insert.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/basic_string.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/ext/atomicity.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/arm-none-eabi/armv7-ar/thumb/bits/gthr.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/functional_hash.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/basic_string.tcc","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/uses_allocator.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_brain.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_drivetrain.h","/Users/mbaraty/Documents/GitHub/9228B-Tower-Takeover-V1/include/vex.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/stdio.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/stdio.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/stdlib.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/alloca.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/string.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/math.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/v5.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/clang/8.0.0/include/stdarg.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_task.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/clang/8.0.0/include/__stddef_max_align_t.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/machine/types.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_event.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_mevent.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_units.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_color.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_motor.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_vision.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/backward/binders.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/stl_relops.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/debug/debug.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/predefined_ops.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/cxxabi_forced.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/range_access.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/arm-none-eabi/armv7-ar/thumb/bits/gthr-default.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/arm-none-eabi/armv7-ar/thumb/bits/atomic_word.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_timer.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_global.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_competition.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/vex_motorgroup.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/sys/features.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/clang/8.0.0/include/stdbool.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/v5_color.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/include/v5_apiprivate.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/arm-none-eabi/armv7-ar/thumb/bits/os_defines.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/arm-none-eabi/armv7-ar/thumb/bits/cpu_defines.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/newlib.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/machine/ieeefp.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/machine/time.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/parse_numbers.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/atomic_lockfree_defines.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/c++/4.9.3/bits/exception_defines.h","/Applications/VEXcode V5 Text.app/Contents/Resources/sdk/vexv5/gcc/include/machine/stdlib.h"],"skipped_by_preprocessor":[],"types":[{"id":0,"usr":8368589376327801919,"detailed_name":"vex","short_name_offset":0,"short_name_size":3,"kind":3,"hover":"","comments":"","declarations":[],"spell":"25:11-25:14|-1|1|2","extent":"25:1-1378:2|-1|1|0","bases":[1],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["25:11-25:14|-1|1|4"]},{"id":1,"usr":13838176792705659279,"detailed_name":"<fundamental>","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[0],"types":[],"funcs":[],"vars":[],"instances":[],"uses":[]},{"id":2,"usr":3769340180355582632,"detailed_name":"vex::triport","short_name_offset":5,"short_name_size":7,"kind":5,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@brief Use this class to get and set information about devices on Three Wire Ports A through H.","declarations":["57:7-57:14|-1|1|4","58:8-58:15|-1|1|4","61:7-61:14|-1|1|4"],"spell":"30:9-30:16|0|2|2","extent":"30:3-286:4|0|2|0","bases":[3],"derived":[],"types":[],"funcs":[0,1,2,3,4,5,6,7,8,9],"vars":[3,19,20,21,22,23,24,25,26,27],"instances":[10],"uses":["57:7-57:14|2|2|4","61:47-61:54|-1|1|4","61:7-61:14|2|2|4","82:11-82:18|-1|1|4","88:35-88:42|-1|1|4","89:59-89:66|-1|1|4","312:9-312:16|-1|1|4","324:22-324:29|-1|1|4","342:16-342:23|-1|1|4","401:17-401:24|-1|1|4","461:21-461:28|-1|1|4","513:22-513:29|-1|1|4","560:14-560:21|-1|1|4","594:21-594:28|-1|1|4","629:14-629:21|-1|1|4","691:15-691:22|-1|1|4","741:16-741:23|-1|1|4","795:15-795:22|-1|1|4","901:24-901:31|-1|1|4","951:20-951:27|-1|1|4","1001:18-1001:25|-1|1|4","1080:16-1080:23|-1|1|4","1129:18-1129:25|-1|1|4","1157:16-1157:23|-1|1|4","1226:18-1226:25|-1|1|4","1236:18-1236:25|-1|1|4","1311:23-1311:30|-1|1|4","1321:23-1321:30|-1|1|4"]},{"id":3,"usr":12573014169591785977,"detailed_name":"vex::device","short_name_offset":5,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":["30:26-30:32|-1|1|4"],"bases":[],"derived":[2],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["30:26-30:32|-1|1|4"]},{"id":4,"usr":17409967827770653370,"detailed_name":"vex::triport::tEventType","short_name_offset":14,"short_name_size":10,"kind":10,"hover":"","comments":"","declarations":[],"spell":"32:18-32:28|2|2|2","extent":"32:7-36:8|2|2|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["215:76-215:86|-1|1|4","216:76-216:86|-1|1|4","217:76-217:86|-1|1|4"]},{"id":5,"usr":13116059786805020697,"detailed_name":"uint32_t","short_name_offset":0,"short_name_size":8,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[3],"uses":["39:7-39:15|-1|1|4","42:25-42:33|-1|1|4","215:34-215:42|-1|1|4","215:67-215:75|-1|1|4","216:34-216:42|-1|1|4","216:67-216:75|-1|1|4","217:34-217:42|-1|1|4","217:67-217:75|-1|1|4"]},{"id":6,"usr":10774868737281855593,"detailed_name":"vex::triportType","short_name_offset":5,"short_name_size":11,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[9,12],"uses":["42:38-42:49|-1|1|4","53:48-53:59|-1|1|4","54:7-54:18|-1|1|4","81:11-81:22|-1|1|4","87:37-87:48|-1|1|4","89:41-89:52|-1|1|4","98:28-98:39|-1|1|4","106:11-106:22|-1|1|4","158:34-158:45|-1|1|4","324:43-324:54|-1|1|4"]},{"id":7,"usr":1847747007866647169,"detailed_name":"first","short_name_offset":0,"short_name_size":5,"kind":26,"hover":"","comments":"","declarations":[],"spell":"44:26-44:31|2|3|2","extent":"44:17-44:31|2|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["45:22-45:27|-1|1|4"]},{"id":8,"usr":7445405579134756832,"detailed_name":"Args","short_name_offset":0,"short_name_size":4,"kind":26,"hover":"","comments":"","declarations":[],"spell":"44:45-44:49|2|3|2","extent":"44:33-44:49|2|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["45:34-45:38|-1|1|4"]},{"id":9,"usr":9863315217299931811,"detailed_name":"int32_t","short_name_offset":0,"short_name_size":7,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[6,8,13,47,57,62,68],"uses":["50:7-50:14|-1|1|4","57:16-57:23|-1|1|4","61:16-61:23|-1|1|4","80:11-80:18|-1|1|4","83:11-83:18|-1|1|4","84:11-84:18|-1|1|4","84:37-84:44|-1|1|4","88:23-88:30|-1|1|4","89:23-89:30|-1|1|4","114:28-114:35|-1|1|4","122:11-122:18|-1|1|4","161:33-161:40|-1|1|4","314:9-314:16|-1|1|4","315:9-315:16|-1|1|4","315:35-315:42|-1|1|4","352:9-352:16|-1|1|4","362:9-362:16|-1|1|4","411:9-411:16|-1|1|4","421:9-421:16|-1|1|4","471:9-471:16|-1|1|4","523:9-523:16|-1|1|4","543:31-543:38|-1|1|4","640:9-640:16|-1|1|4","651:9-651:16|-1|1|4","701:9-701:16|-1|1|4","712:9-712:16|-1|1|4","752:9-752:16|-1|1|4","763:9-763:16|-1|1|4","784:9-784:16|-1|1|4","806:9-806:16|-1|1|4","828:9-828:16|-1|1|4","839:37-839:44|-1|1|4","911:9-911:16|-1|1|4","922:9-922:16|-1|1|4","962:9-962:16|-1|1|4","972:9-972:16|-1|1|4","1011:9-1011:16|-1|1|4","1090:9-1090:16|-1|1|4","1141:21-1141:28|-1|1|4","1169:24-1169:31|-1|1|4","1190:29-1190:36|-1|1|4","1214:9-1214:16|-1|1|4","1299:9-1299:16|-1|1|4"]},{"id":10,"usr":14291758771775019914,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["53:7-53:30|-1|1|4","54:48-54:71|-1|1|4"]},{"id":11,"usr":6133554353502437909,"detailed_name":"Args","short_name_offset":0,"short_name_size":4,"kind":26,"hover":"","comments":"","declarations":[],"spell":"60:29-60:33|8|3|2","extent":"60:17-60:33|8|3|0","bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["61:31-61:35|-1|1|4"]},{"id":12,"usr":665903730239396376,"detailed_name":"vex::triport::port","short_name_offset":14,"short_name_size":4,"kind":5,"hover":"","comments":"\r\n@prog_lang{none}\r\n@brief TBD","declarations":["87:11-87:15|-1|1|4","88:11-88:15|-1|1|4","89:11-89:15|-1|1|4","90:12-90:16|-1|1|4"],"spell":"76:13-76:17|2|2|2","extent":"76:7-221:8|2|2|0","bases":[],"derived":[],"types":[],"funcs":[11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33],"vars":[8,9,10,14,15,16,17,18],"instances":[19,20,21,22,23,24,25,26,27,28],"uses":["87:11-87:15|12|2|4","88:11-88:15|12|2|4","89:11-89:15|12|2|4","225:7-225:11|-1|1|4","243:7-243:11|-1|1|4","249:7-249:11|-1|1|4","255:7-255:11|-1|1|4","261:7-261:11|-1|1|4","267:7-267:11|-1|1|4","273:7-273:11|-1|1|4","279:7-279:11|-1|1|4","285:7-285:11|-1|1|4","312:18-312:22|-1|1|4","324:31-324:35|-1|1|4","342:25-342:29|-1|1|4","401:26-401:30|-1|1|4","461:30-461:34|-1|1|4","513:31-513:35|-1|1|4","560:23-560:27|-1|1|4","594:30-594:34|-1|1|4","629:23-629:27|-1|1|4","691:24-691:28|-1|1|4","741:25-741:29|-1|1|4","795:24-795:28|-1|1|4","901:33-901:37|-1|1|4","951:29-951:33|-1|1|4","1001:27-1001:31|-1|1|4","1080:25-1080:29|-1|1|4","1129:27-1129:31|-1|1|4","1157:25-1157:29|-1|1|4","1226:27-1226:31|-1|1|4","1236:27-1236:31|-1|1|4","1311:32-1311:36|-1|1|4","1321:32-1321:36|-1|1|4"]},{"id":13,"usr":9501318860097581378,"detailed_name":"vex::__tridevice","short_name_offset":5,"short_name_size":11,"kind":5,"hover":"","comments":"\r\n@prog_lang{none}\r\n@brief Use this class to get access to Three Wire Port functions and members.","declarations":["77:22-77:33|-1|1|4","324:9-324:20|-1|1|4","325:10-325:21|-1|1|4","332:25-332:36|-1|1|4","392:26-392:37|-1|1|4","451:30-451:41|-1|1|4","503:31-503:42|-1|1|4","619:23-619:34|-1|1|4","681:24-681:35|-1|1|4","731:25-731:36|-1|1|4","782:24-782:35|-1|1|4","891:33-891:44|-1|1|4","941:29-941:40|-1|1|4","991:27-991:38|-1|1|4","1070:25-1070:36|-1|1|4","1119:27-1119:38|-1|1|4","1147:25-1147:36|-1|1|4","1211:27-1211:38|-1|1|4","1296:32-1296:43|-1|1|4"],"spell":"291:9-291:20|0|2|2","extent":"291:3-327:4|0|2|0","bases":[],"derived":[19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34],"types":[],"funcs":[35,36,37,38],"vars":[28,29,30,31,32,33],"instances":[],"uses":["324:9-324:20|13|2|4","332:25-332:36|-1|1|4","392:26-392:37|-1|1|4","451:30-451:41|-1|1|4","503:31-503:42|-1|1|4","619:23-619:34|-1|1|4","681:24-681:35|-1|1|4","731:25-731:36|-1|1|4","782:24-782:35|-1|1|4","891:33-891:44|-1|1|4","941:29-941:40|-1|1|4","991:27-991:38|-1|1|4","1070:25-1070:36|-1|1|4","1119:27-1119:38|-1|1|4","1147:25-1147:36|-1|1|4","1211:27-1211:38|-1|1|4","1296:32-1296:43|-1|1|4"]},{"id":14,"usr":202319149122335501,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["83:37-83:48|-1|1|4","314:35-314:46|-1|1|4","640:26-640:37|-1|1|4","652:25-652:36|-1|1|4","701:26-701:37|-1|1|4","713:25-713:36|-1|1|4","752:26-752:37|-1|1|4","764:25-764:36|-1|1|4","806:26-806:37|-1|1|4","829:25-829:36|-1|1|4","911:26-911:37|-1|1|4","923:25-923:36|-1|1|4","962:26-962:37|-1|1|4","973:25-973:36|-1|1|4"]},{"id":15,"usr":2518119703099383490,"detailed_name":"vex::rotationUnits","short_name_offset":5,"short_name_size":13,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[60],"uses":["186:44-186:57|-1|1|4","195:29-195:42|-1|1|4","664:26-664:39|-1|1|4","817:26-817:39|-1|1|4","869:45-869:58|-1|1|4","876:26-876:39|-1|1|4","876:48-876:61|-1|1|4","883:29-883:42|-1|1|4","883:51-883:64|-1|1|4","1031:42-1031:55|-1|1|4","1042:27-1042:40|-1|1|4","1179:38-1179:51|-1|1|4","1203:43-1203:56|-1|1|4"]},{"id":16,"usr":9902271146873654022,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["204:29-204:42|-1|1|4","1053:27-1053:40|-1|1|4","1278:56-1278:69|-1|1|4","1281:46-1281:59|-1|1|4","1363:56-1363:69|-1|1|4","1366:46-1366:59|-1|1|4"]},{"id":17,"usr":12969172306692938079,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[],"uses":["213:29-213:42|-1|1|4","1102:27-1102:40|-1|1|4"]},{"id":18,"usr":5609722413052049945,"detailed_name":"vex::mevent","short_name_offset":5,"short_name_size":6,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[14,15,16,17,18,29,30,31,32,33,34,35,36,37,38,39,42,44,46,50,52,54,55,56],"uses":["215:11-215:17|-1|1|4","216:11-216:17|-1|1|4","217:11-217:17|-1|1|4","219:11-219:17|-1|1|4","220:11-220:17|-1|1|4","317:9-317:15|-1|1|4","318:9-318:15|-1|1|4","319:9-319:15|-1|1|4","320:9-320:15|-1|1|4","321:9-321:15|-1|1|4","385:9-385:15|-1|1|4","386:9-386:15|-1|1|4","444:9-444:15|-1|1|4","445:9-445:15|-1|1|4","496:9-496:15|-1|1|4","497:9-497:15|-1|1|4","675:9-675:15|-1|1|4","725:9-725:15|-1|1|4","776:9-776:15|-1|1|4","885:9-885:15|-1|1|4","935:9-935:15|-1|1|4","985:9-985:15|-1|1|4","1064:9-1064:15|-1|1|4","1113:9-1113:15|-1|1|4"]},{"id":19,"usr":15620256702126280030,"detailed_name":"vex::limit","short_name_offset":5,"short_name_size":5,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with the limit switch","declarations":["292:20-292:25|-1|1|4","342:9-342:14|-1|1|4","343:10-343:15|-1|1|4"],"spell":"332:9-332:14|0|2|2","extent":"332:3-387:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[39,40,41,42,43,44,45,46],"vars":[34,35],"instances":[],"uses":["342:9-342:14|19|2|4"]},{"id":20,"usr":8518972014115105283,"detailed_name":"vex::bumper","short_name_offset":5,"short_name_size":6,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with the bumper device","declarations":["293:20-293:26|-1|1|4","401:9-401:15|-1|1|4","402:10-402:16|-1|1|4"],"spell":"392:9-392:15|0|2|2","extent":"392:3-446:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[47,48,49,50,51,52,53,54],"vars":[36,37],"instances":[],"uses":["401:9-401:15|20|2|4"]},{"id":21,"usr":2832760895183346873,"detailed_name":"vex::digital_in","short_name_offset":5,"short_name_size":10,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a digital-in device","declarations":["294:20-294:30|-1|1|4","461:9-461:19|-1|1|4","462:10-462:20|-1|1|4"],"spell":"451:9-451:19|0|2|2","extent":"451:3-498:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[55,56,57,58,59,60,61],"vars":[38,39],"instances":[],"uses":["461:9-461:19|21|2|4"]},{"id":22,"usr":15494287226726290542,"detailed_name":"vex::digital_out","short_name_offset":5,"short_name_size":11,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a digital-out device.","declarations":["295:20-295:31|-1|1|4","513:9-513:20|-1|1|4","514:10-514:21|-1|1|4","550:22-550:33|-1|1|4","584:29-584:40|-1|1|4"],"spell":"503:9-503:20|0|2|2","extent":"503:3-544:4|0|2|0","bases":[13],"derived":[35,36],"types":[],"funcs":[62,63,64,65,66,67,68],"vars":[],"instances":[],"uses":["513:9-513:20|22|2|4","550:22-550:33|-1|1|4","584:29-584:40|-1|1|4"]},{"id":23,"usr":8689778855792769856,"detailed_name":"vex::pot","short_name_offset":5,"short_name_size":3,"kind":5,"hover":"","comments":"Analog sensors\r\n \r\n @prog_lang{block|cpp|pro}\r\n @brief Use this class when programming with a potentiometer.","declarations":["297:20-297:23|-1|1|4","629:9-629:12|-1|1|4","630:10-630:13|-1|1|4"],"spell":"619:9-619:12|0|2|2","extent":"619:3-676:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[77,78,79,80,81,82],"vars":[42],"instances":[],"uses":["629:9-629:12|23|2|4"]},{"id":24,"usr":14068812907132680229,"detailed_name":"vex::line","short_name_offset":5,"short_name_size":4,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a line follower.","declarations":["298:20-298:24|-1|1|4","691:9-691:13|-1|1|4","692:10-692:14|-1|1|4"],"spell":"681:9-681:13|0|2|2","extent":"681:3-726:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[83,84,85,86,87],"vars":[44],"instances":[],"uses":["691:9-691:13|24|2|4"]},{"id":25,"usr":5548479328449531364,"detailed_name":"vex::light","short_name_offset":5,"short_name_size":5,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a light sensor.","declarations":["299:20-299:25|-1|1|4","741:9-741:14|-1|1|4","742:10-742:15|-1|1|4"],"spell":"731:9-731:14|0|2|2","extent":"731:3-777:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[88,89,90,91,92],"vars":[46],"instances":[],"uses":["741:9-741:14|25|2|4"]},{"id":26,"usr":11843246473407549820,"detailed_name":"vex::gyro","short_name_offset":5,"short_name_size":4,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a gyro sensor.","declarations":["300:20-300:24|-1|1|4","795:9-795:13|-1|1|4","796:10-796:14|-1|1|4"],"spell":"782:9-782:13|0|2|2","extent":"782:3-886:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[93,94,95,96,97,98,99,100,101,102,103,104],"vars":[47,50],"instances":[],"uses":["795:9-795:13|26|2|4"]},{"id":27,"usr":16174117496904612866,"detailed_name":"vex::accelerometer","short_name_offset":5,"short_name_size":13,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with an accelerometer sensor.","declarations":["301:20-301:33|-1|1|4","901:9-901:22|-1|1|4","902:10-902:23|-1|1|4"],"spell":"891:9-891:22|0|2|2","extent":"891:3-936:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[105,106,107,108,109],"vars":[52],"instances":[],"uses":["901:9-901:22|27|2|4"]},{"id":28,"usr":2061189157793251399,"detailed_name":"vex::analog_in","short_name_offset":5,"short_name_size":9,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with an analog-in device.","declarations":["302:20-302:29|-1|1|4","951:9-951:18|-1|1|4","952:10-952:19|-1|1|4"],"spell":"941:9-941:18|0|2|2","extent":"941:3-986:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[110,111,112,113,114],"vars":[54],"instances":[],"uses":["951:9-951:18|28|2|4"]},{"id":29,"usr":188659887562338705,"detailed_name":"vex::encoder","short_name_offset":5,"short_name_size":7,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with an encoder.","declarations":["304:20-304:27|-1|1|4","1001:9-1001:16|-1|1|4","1002:10-1002:17|-1|1|4"],"spell":"991:9-991:16|0|2|2","extent":"991:3-1065:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[115,116,117,118,119,120,121,122,123],"vars":[55],"instances":[],"uses":["1001:9-1001:16|29|2|4"]},{"id":30,"usr":4391518431818245250,"detailed_name":"vex::sonar","short_name_offset":5,"short_name_size":5,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a sonar sensor.","declarations":["305:20-305:25|-1|1|4","1080:9-1080:14|-1|1|4","1081:10-1081:15|-1|1|4"],"spell":"1070:9-1070:14|0|2|2","extent":"1070:3-1114:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[124,125,126,127,128,129],"vars":[56],"instances":[],"uses":["1080:9-1080:14|30|2|4"]},{"id":31,"usr":4798135242787498748,"detailed_name":"vex::pwm_out","short_name_offset":5,"short_name_size":7,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a pwm-out device.","declarations":["306:20-306:27|-1|1|4","1129:9-1129:16|-1|1|4","1130:10-1130:17|-1|1|4"],"spell":"1119:9-1119:16|0|2|2","extent":"1119:3-1142:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[130,131,132],"vars":[],"instances":[],"uses":["1129:9-1129:16|31|2|4"]},{"id":32,"usr":9659090348979825724,"detailed_name":"vex::servo","short_name_offset":5,"short_name_size":5,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a servo device.","declarations":["307:20-307:25|-1|1|4","1157:9-1157:14|-1|1|4","1158:10-1158:15|-1|1|4"],"spell":"1147:9-1147:14|0|2|2","extent":"1147:3-1206:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[133,134,135,136,137,138],"vars":[],"instances":[],"uses":["1157:9-1157:14|32|2|4"]},{"id":33,"usr":3283425963657057559,"detailed_name":"vex::motor29","short_name_offset":5,"short_name_size":7,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming a motor connected to a motor controller 29.","declarations":["308:20-308:27|-1|1|4","1226:9-1226:16|-1|1|4","1236:9-1236:16|-1|1|4","1237:10-1237:17|-1|1|4"],"spell":"1211:9-1211:16|0|2|2","extent":"1211:3-1291:4|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[139,140,141,142,143,144,145,146,147],"vars":[61,62,63],"instances":[],"uses":["1226:9-1226:16|33|2|4","1236:9-1236:16|33|2|4"]},{"id":34,"usr":12267479175068488160,"detailed_name":"vex::motor_victor","short_name_offset":5,"short_name_size":12,"kind":5,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@brief Use this class when programming with a motor connected to a victor motor controller.","declarations":["309:20-309:32|-1|1|4","1311:9-1311:21|-1|1|4","1321:9-1321:21|-1|1|4","1322:10-1322:22|-1|1|4"],"spell":"1296:9-1296:21|0|2|2","extent":"1296:3-1376:6|0|2|0","bases":[13],"derived":[],"types":[],"funcs":[148,149,150,151,152,153,154,155,156],"vars":[67,68,69],"instances":[],"uses":["1311:9-1311:21|34|2|4","1321:9-1321:21|34|2|4"]},{"id":35,"usr":16204249986995676230,"detailed_name":"vex::led","short_name_offset":5,"short_name_size":3,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a led device.","declarations":["560:9-560:12|-1|1|4","561:10-561:13|-1|1|4"],"spell":"550:9-550:12|0|2|2","extent":"550:3-578:4|0|2|0","bases":[22],"derived":[],"types":[],"funcs":[69,70,71,72],"vars":[],"instances":[],"uses":["560:9-560:12|35|2|4"]},{"id":36,"usr":2532378305847046812,"detailed_name":"vex::pneumatics","short_name_offset":5,"short_name_size":10,"kind":5,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro} \r\n @brief Use this class when programming with a pneumatics device.","declarations":["594:9-594:19|-1|1|4","595:10-595:20|-1|1|4"],"spell":"584:9-584:19|0|2|2","extent":"584:3-612:4|0|2|0","bases":[22],"derived":[],"types":[],"funcs":[73,74,75,76],"vars":[],"instances":[],"uses":["594:9-594:19|36|2|4"]},{"id":37,"usr":13233960938812283541,"detailed_name":"vex::percentUnits","short_name_offset":5,"short_name_size":12,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[40,43,45,48,51,53,58,66,72],"uses":["651:26-651:38|-1|1|4","712:26-712:38|-1|1|4","763:26-763:38|-1|1|4","828:26-828:38|-1|1|4","922:26-922:38|-1|1|4","972:26-972:38|-1|1|4","1141:36-1141:48|-1|1|4","1169:39-1169:51|-1|1|4","1190:44-1190:56|-1|1|4","1248:44-1248:56|-1|1|4","1280:56-1280:68|-1|1|4","1333:44-1333:56|-1|1|4","1365:56-1365:68|-1|1|4"]},{"id":38,"usr":22,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[59,65,71],"uses":[]},{"id":39,"usr":3,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[61,63,67,69],"uses":[]},{"id":40,"usr":2002947408905702631,"detailed_name":"vex::directionType","short_name_offset":5,"short_name_size":13,"kind":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"types":[],"funcs":[],"vars":[],"instances":[64,70],"uses":["1267:20-1267:33|-1|1|4","1278:20-1278:33|-1|1|4","1280:20-1280:33|-1|1|4","1352:20-1352:33|-1|1|4","1363:20-1363:33|-1|1|4","1365:20-1365:33|-1|1|4"]}],"funcs":[{"id":0,"usr":17801833967830827767,"detailed_name":"void vex::triport::_setport()","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"41:12-41:20|2|2|2","extent":"41:7-41:25|2|2|0","declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":1,"usr":9885705416006351555,"detailed_name":"void vex::triport::_configPort(uint32_t id, vex::triportType type)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"42:12-42:23|2|2|1","param_spellings":["42:34-42:36","42:50-42:54"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":["46:9-46:20|2|3|32"],"callees":[]},{"id":2,"usr":8273333952169982073,"detailed_name":"void vex::triport::_setport(first port, Args... args)","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"45:12-45:20|2|2|2","extent":"45:7-48:8|2|2|0","declaring_type":2,"bases":[],"derived":[],"vars":[4,5],"uses":["47:9-47:17|2|3|32","62:9-62:17|8|3|32"],"callees":["47:9-47:17|2|3|32","46:9-46:20|1|3|32"]},{"id":3,"usr":2682546760874825531,"detailed_name":"int32_t vex::triport::_getIndex()","short_name_offset":22,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"50:15-50:24|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":["215:52-215:61|12|2|32","216:52-216:61|12|2|32","217:52-217:61|12|2|32"],"callees":[]},{"id":4,"usr":10943035773614555501,"detailed_name":"V5_AdiPortConfiguration vex::triport::_internalType(vex::triportType type)","short_name_offset":38,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"conversion from vcs enum to C API","declarations":[{"spell":"53:33-53:46|2|2|1","param_spellings":["53:60-53:64"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":5,"usr":2287044195653121759,"detailed_name":"vex::triportType vex::triport::_externalType(V5_AdiPortConfiguration type)","short_name_offset":31,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"54:33-54:46|2|2|1","param_spellings":["54:72-54:76"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":6,"usr":3931983049838510130,"detailed_name":"void vex::triport::triport(int32_t index)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"57:7-57:14|2|2|1","param_spellings":["57:24-57:29"]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":7,"usr":15701364086338320736,"detailed_name":"void vex::triport::~triport() noexcept","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"58:7-58:15|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":8,"usr":132146775627206989,"detailed_name":"void vex::triport::triport(int32_t index, Args... args)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"61:7-61:14|2|2|2","extent":"61:7-63:8|2|2|0","declaring_type":2,"bases":[],"derived":[],"vars":[6,7],"uses":[],"callees":["62:9-62:17|2|3|32"]},{"id":9,"usr":17807885584382865584,"detailed_name":"bool vex::triport::installed()","short_name_offset":19,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the status of what is installed on the port.\r\n@return Returns true if a 3-Wire Port device is installed in the port, otherwise false.","declarations":[{"spell":"70:23-70:32|2|2|1","param_spellings":[]}],"declaring_type":2,"bases":[10],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":10,"usr":15816097909238292831,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[9],"vars":[],"uses":[],"callees":[]},{"id":11,"usr":1419849057999895701,"detailed_name":"int32_t vex::triport::port::_convertAnalog(vex::analogUnits units)","short_name_offset":28,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"83:21-83:35|12|2|1","param_spellings":["83:49-83:54"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":12,"usr":2125366561255561783,"detailed_name":"int32_t vex::triport::port::_virtual_value(int32_t virtual_port)","short_name_offset":28,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"84:21-84:35|12|2|1","param_spellings":["84:45-84:57"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":13,"usr":12368680452725606588,"detailed_name":"void vex::triport::port::port()","short_name_offset":13,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"87:11-87:15|12|2|2","extent":"87:11-87:81|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":14,"usr":17301071813425833926,"detailed_name":"void vex::triport::port::port(const int32_t id, vex::triport *parent)","short_name_offset":13,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"88:11-88:15|12|2|1","param_spellings":["88:31-88:33","88:44-88:50"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":["225:24-225:33|2|2|288","226:24-226:33|2|2|288","227:24-227:33|2|2|288","228:24-228:33|2|2|288","229:24-229:33|2|2|288","230:24-230:33|2|2|288","231:24-231:33|2|2|288","232:24-232:33|2|2|288"],"callees":[]},{"id":15,"usr":9797865168480559525,"detailed_name":"void vex::triport::port::port(const int32_t id, const vex::triportType type, vex::triport *parent)","short_name_offset":13,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"89:11-89:15|12|2|1","param_spellings":["89:31-89:33","89:53-89:57","89:68-89:74"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":16,"usr":8010592887028420193,"detailed_name":"void vex::triport::port::~port() noexcept","short_name_offset":25,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"90:11-90:16|12|2|2","extent":"90:11-90:21|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":17,"usr":9814417834967813633,"detailed_name":"void vex::triport::port::type(const vex::triportType type)","short_name_offset":25,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Sets the port to a specific port type.\r\n@param type A type of port that you want to set it to.","declarations":[{"spell":"98:16-98:20|12|2|1","param_spellings":["98:40-98:44"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":["159:19-159:23|25|3|32"],"callees":[]},{"id":18,"usr":16455694137275251885,"detailed_name":"vex::triportType vex::triport::port::type()","short_name_offset":37,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the current port type.\r\n@return Returns the Port Type.","declarations":[{"spell":"106:23-106:27|12|2|1","param_spellings":[]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":19,"usr":15837497244688683553,"detailed_name":"void vex::triport::port::value(int32_t value)","short_name_offset":25,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Sets the port's value to the specified integer in the parameter. \r\n@param value An integer number that will be set to the port's value.","declarations":[{"spell":"114:21-114:26|12|2|1","param_spellings":["114:36-114:41"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":["162:19-162:24|26|3|32"],"callees":[]},{"id":20,"usr":4826109805981223583,"detailed_name":"int32_t vex::triport::port::value()","short_name_offset":28,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the value of a port.\r\n@return Returns an integer that represents the port's value.","declarations":[{"spell":"122:21-122:26|12|2|1","param_spellings":[]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":["165:26-165:31|27|3|32","168:27-168:32|28|3|32"],"callees":[]},{"id":21,"usr":5145594116072304612,"detailed_name":"void vex::triport::port::set(bool value)","short_name_offset":25,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Sets the value of the port to a Boolean value.\r\n@param value A true or false Boolean value that the port will be set to.","declarations":[{"spell":"130:21-130:24|12|2|1","param_spellings":["130:31-130:36"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":22,"usr":16614726809120142055,"detailed_name":"void vex::triport::port::pressed(void (*)() callback)","short_name_offset":25,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Calls back a function when the port is pressed.\r\n@param callback A reference to a function.","declarations":[{"spell":"139:20-139:27|12|2|1","param_spellings":["139:37-139:45"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":23,"usr":14650134078297585491,"detailed_name":"void vex::triport::port::released(void (*)() callback)","short_name_offset":25,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Calls back a function when the port is released.\r\n@param callback A reference to a function.","declarations":[{"spell":"147:20-147:28|12|2|1","param_spellings":["147:38-147:46"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":24,"usr":6600724912140663173,"detailed_name":"void vex::triport::port::changed(void (*)() callback)","short_name_offset":25,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Calls back a function when the port has changed value.\r\n@param callback A reference to a function.","declarations":[{"spell":"155:20-155:27|12|2|1","param_spellings":["155:37-155:45"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":25,"usr":2865351536613894399,"detailed_name":"void vex::triport::port::operator()(const vex::triportType type)","short_name_offset":25,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"158:16-158:26|12|2|2","extent":"158:11-160:12|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[12],"uses":[],"callees":["159:19-159:23|17|3|32"]},{"id":26,"usr":8238671536491751701,"detailed_name":"void vex::triport::port::operator=(const int32_t value)","short_name_offset":25,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"161:16-161:25|12|2|2","extent":"161:11-163:12|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[13],"uses":[],"callees":["162:19-162:24|19|3|32"]},{"id":27,"usr":9270276694801486968,"detailed_name":"int vex::triport::port::operator int()","short_name_offset":24,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"164:11-164:23|12|2|2","extent":"164:11-166:12|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["165:26-165:31|20|3|32"]},{"id":28,"usr":9774127917934000460,"detailed_name":"bool vex::triport::port::operator bool()","short_name_offset":25,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[],"spell":"167:11-167:24|12|2|2","extent":"167:11-169:12|12|2|0","declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["168:27-168:32|20|3|32"]},{"id":29,"usr":6879533738461468161,"detailed_name":"void vex::triport::port::resetRotation()","short_name_offset":25,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"encoder specific\r\n\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Resets the rotation of the encoder to zero.","declarations":[{"spell":"177:19-177:32|12|2|1","param_spellings":[]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":30,"usr":6251771076573549965,"detailed_name":"void vex::triport::port::setRotation(double val, vex::rotationUnits units)","short_name_offset":25,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Sets the rotation of the encoder to a specific value.\r\n@param val A double that represents the value to set the rotation to.\r\n@param units The unit type that the previous value should be treated as.","declarations":[{"spell":"186:19-186:30|12|2|1","param_spellings":["186:39-186:42","186:58-186:63"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":31,"usr":6651320802302635162,"detailed_name":"double vex::triport::port::rotation(vex::rotationUnits units)","short_name_offset":27,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the rotation value of the encoder.\r\n@return Returns a double that represents the current rotation of the encoder.\r\n@param units A unit type that defines what value of rotation that should be returned.","declarations":[{"spell":"195:19-195:27|12|2|1","param_spellings":["195:43-195:48"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":32,"usr":8686066992317197674,"detailed_name":"double vex::triport::port::velocity(vex::velocityUnits units)","short_name_offset":27,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the velocity of the encoder.\r\n@return Returns a double that represents the current velocity of the encoder.\r\n@param units A unit type that defines what value of velocity that should be returned.","declarations":[{"spell":"204:19-204:27|12|2|1","param_spellings":["204:43-204:48"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":33,"usr":12998363279193821081,"detailed_name":"double vex::triport::port::distance(vex::distanceUnits units)","short_name_offset":27,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@brief Gets the value of the distance sensor.\r\n@return Returns a double that represents the current distance of the sensor.\r\n@param units A distance unit type that defines what value of distance that should be returned.","declarations":[{"spell":"213:19-213:27|12|2|1","param_spellings":["213:43-213:48"]}],"declaring_type":12,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":34,"usr":16649046213054702002,"detailed_name":"","short_name_offset":0,"short_name_size":0,"kind":0,"storage":0,"hover":"","comments":"","declarations":[],"bases":[],"derived":[],"vars":[],"uses":["215:29-215:119|12|2|288","216:29-216:119|12|2|288","217:29-217:119|12|2|288"],"callees":[]},{"id":35,"usr":4753535292544594204,"detailed_name":"int32_t vex::__tridevice::_convertAnalog(vex::analogUnits units)","short_name_offset":26,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"314:19-314:33|13|2|1","param_spellings":["314:47-314:52"]}],"declaring_type":13,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":36,"usr":10829797573389273764,"detailed_name":"int32_t vex::__tridevice::_virtual_value(int32_t virtual_port)","short_name_offset":26,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"315:19-315:33|13|2|1","param_spellings":["315:43-315:55"]}],"declaring_type":13,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":37,"usr":3188304105787490026,"detailed_name":"void vex::__tridevice::__tridevice(triport::port &port, vex::triportType type)","short_name_offset":10,"short_name_size":11,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"324:9-324:20|13|2|1","param_spellings":["324:37-324:41","324:55-324:59"]}],"declaring_type":13,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":38,"usr":15593876102552983633,"detailed_name":"void vex::__tridevice::~__tridevice()","short_name_offset":23,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"325:9-325:21|13|2|1","param_spellings":[]}],"declaring_type":13,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":39,"usr":11411439005838242726,"detailed_name":"void vex::limit::limit(triport::port &port)","short_name_offset":10,"short_name_size":5,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::limit Limit = vex::limit(Brain.ThreeWirePort.A);}\r\n@brief Creates a new limit object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"342:9-342:14|19|2|1","param_spellings":["342:31-342:35"]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":40,"usr":15800421073228516722,"detailed_name":"void vex::limit::~limit()","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"343:9-343:15|19|2|1","param_spellings":[]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":41,"usr":11764919033543058506,"detailed_name":"int32_t vex::limit::value()","short_name_offset":20,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{Limit.value()}\r\n@brief Gets the value of the limit switch\r\n@return Returns an integer that represents the value of the limit device.","declarations":[{"spell":"352:19-352:24|19|2|1","param_spellings":[]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":["362:39-362:44|42|3|32"],"callees":[]},{"id":42,"usr":7517757565452688389,"detailed_name":"int32_t vex::limit::pressing()","short_name_offset":20,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Limit.pressing()}\r\n@return_type_override{bool}\r\n@brief Gets the state of the limit device.\r\n@return Returns the state of the limit device.","declarations":[],"spell":"362:19-362:27|19|2|2","extent":"362:9-362:49|19|2|0","declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["362:39-362:44|41|3|32"]},{"id":43,"usr":18191725025276820662,"detailed_name":"void vex::limit::pressed(void (*)() callback)","short_name_offset":17,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Limit.pressed(pressedFunction);}\r\n@brief Calls a function when the limit switch is pressed.\r\n@param callback A reference to a function.","declarations":[{"spell":"371:19-371:26|19|2|1","param_spellings":["371:36-371:44"]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":44,"usr":10784886544997377842,"detailed_name":"void vex::limit::released(void (*)() callback)","short_name_offset":17,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Limit.released(releasedFunction);}\r\n@brief Calls a function when the limit switch is released.\r\n@param callback A reference to a function.","declarations":[{"spell":"380:19-380:27|19|2|1","param_spellings":["380:37-380:45"]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":45,"usr":10915898523202274949,"detailed_name":"int vex::limit::operator int()","short_name_offset":16,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"382:9-382:21|19|2|1","param_spellings":[]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":46,"usr":15488606114961570538,"detailed_name":"bool vex::limit::operator bool()","short_name_offset":17,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"383:9-383:22|19|2|1","param_spellings":[]}],"declaring_type":19,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":47,"usr":996587204434591092,"detailed_name":"void vex::bumper::bumper(triport::port &port)","short_name_offset":10,"short_name_size":6,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::bumper Bumper = vex::bumper(Brain.ThreeWirePort.A);}\r\n@brief Creates a new bumper object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"401:9-401:15|20|2|1","param_spellings":["401:32-401:36"]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":48,"usr":9926818344111669173,"detailed_name":"void vex::bumper::~bumper()","short_name_offset":18,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"402:9-402:16|20|2|1","param_spellings":[]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":49,"usr":4528052738585537310,"detailed_name":"int32_t vex::bumper::value()","short_name_offset":21,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{Bumper.value()}\r\n@brief Gets the value of the bumper device.\r\n@return Returns an integer that represents the value of the bumper device.","declarations":[{"spell":"411:19-411:24|20|2|1","param_spellings":[]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":["421:39-421:44|50|3|32"],"callees":[]},{"id":50,"usr":18226640971959250641,"detailed_name":"int32_t vex::bumper::pressing()","short_name_offset":21,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Bumper.pressing()}\r\n@return_type_override{bool}\r\n@brief Get the pressed status of the bumper device.\r\n@return Returns the state of the bumper device. If it is pressed it will return a one. If unpressed, it will return a zero.","declarations":[],"spell":"421:19-421:27|20|2|2","extent":"421:9-421:49|20|2|0","declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":["421:39-421:44|49|3|32"]},{"id":51,"usr":3597663717362175292,"detailed_name":"void vex::bumper::pressed(void (*)() callback)","short_name_offset":18,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Bumper.pressed(pressedFunction);}\r\n@brief Calls a function when the bumper switch is pressed.\r\n@param callback A reference to a function.","declarations":[{"spell":"430:19-430:26|20|2|1","param_spellings":["430:36-430:44"]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":52,"usr":870864726503293301,"detailed_name":"void vex::bumper::released(void (*)() callback)","short_name_offset":18,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Bumper.released(releasedFunction);}\r\n@brief Calls a function when the bumper switch is released.\r\n@param callback A reference to a function.","declarations":[{"spell":"439:19-439:27|20|2|1","param_spellings":["439:37-439:45"]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":53,"usr":906831332238531883,"detailed_name":"int vex::bumper::operator int()","short_name_offset":17,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"441:9-441:21|20|2|1","param_spellings":[]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":54,"usr":7321494511791712097,"detailed_name":"bool vex::bumper::operator bool()","short_name_offset":18,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"442:9-442:22|20|2|1","param_spellings":[]}],"declaring_type":20,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":55,"usr":7473562854000021874,"detailed_name":"void vex::digital_in::digital_in(triport::port &port)","short_name_offset":10,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::digital_in Digital_in = vex::digital_in(Brain.ThreeWirePort.A);}\r\n@brief Creates a new digital-in object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"461:9-461:19|21|2|1","param_spellings":["461:36-461:40"]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":56,"usr":355111189135392440,"detailed_name":"void vex::digital_in::~digital_in()","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"462:9-462:20|21|2|1","param_spellings":[]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":57,"usr":1010115263357273031,"detailed_name":"int32_t vex::digital_in::value()","short_name_offset":25,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{DigitalIn.value()}\r\n@brief Gets the value of the digital-in device.\r\n@return Returns an integer that represents the value of the digital-in device.","declarations":[{"spell":"471:19-471:24|21|2|1","param_spellings":[]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":58,"usr":5135144458374767997,"detailed_name":"void vex::digital_in::high(void (*)() callback)","short_name_offset":22,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{DigitalIn.high(pressedFunction);}\r\n@brief Calls a function when the digital input goes high.\r\n@param callback A reference to a function.","declarations":[{"spell":"480:19-480:23|21|2|1","param_spellings":["480:33-480:41"]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":59,"usr":1814642736324665881,"detailed_name":"void vex::digital_in::low(void (*)() callback)","short_name_offset":22,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{DigitalIn.low(releasedFunction);}\r\n@brief Calls a function when the digital input goes low.\r\n@param callback A reference to a function.","declarations":[{"spell":"489:19-489:22|21|2|1","param_spellings":["489:32-489:40"]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":60,"usr":18312915212765305106,"detailed_name":"int vex::digital_in::operator int()","short_name_offset":21,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"491:9-491:21|21|2|1","param_spellings":[]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":61,"usr":10013611948731339564,"detailed_name":"bool vex::digital_in::operator bool()","short_name_offset":22,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"492:9-492:22|21|2|1","param_spellings":[]}],"declaring_type":21,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":62,"usr":15716122994892812285,"detailed_name":"void vex::digital_out::digital_out(triport::port &port)","short_name_offset":10,"short_name_size":11,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::digital_out Digital_out = vex::digital_out(Brain.ThreeWirePort.A);}\r\n@brief Creates a new digital-out object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"513:9-513:20|22|2|1","param_spellings":["513:37-513:41"]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":63,"usr":16019882191136053338,"detailed_name":"void vex::digital_out::~digital_out()","short_name_offset":23,"short_name_size":12,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"514:9-514:21|22|2|1","param_spellings":[]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":64,"usr":6888789065117327911,"detailed_name":"int32_t vex::digital_out::value()","short_name_offset":26,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{DigitalOut.value()}\r\n@brief Gets the value of the digital-out device.\r\n@return Returns an integer that represents the value of the digital-out device.","declarations":[{"spell":"523:19-523:24|22|2|1","param_spellings":[]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":65,"usr":311132200947991291,"detailed_name":"void vex::digital_out::set(bool value)","short_name_offset":23,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{DigitalOut.set(true);}\r\n@brief Sets the digital-out device to a Boolean value.\r\n@param value A true or false Boolean value.","declarations":[{"spell":"532:19-532:22|22|2|1","param_spellings":["532:29-532:34"]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":66,"usr":3930798963768847771,"detailed_name":"int vex::digital_out::operator int()","short_name_offset":22,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"533:9-533:21|22|2|1","param_spellings":[]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":67,"usr":16370125128715911350,"detailed_name":"bool vex::digital_out::operator bool()","short_name_offset":23,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"534:9-534:22|22|2|1","param_spellings":[]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":68,"usr":13129283520425798438,"detailed_name":"void vex::digital_out::operator=(const int32_t value)","short_name_offset":23,"short_name_size":9,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{DigitalOut.operator(1);}\r\n@brief Sets the output value of the digital-out device.\r\n@param value The value to set the digital-out device. Typically 1 or 0.","declarations":[{"spell":"543:14-543:23|22|2|1","param_spellings":["543:39-543:44"]}],"declaring_type":22,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":69,"usr":3383588432254051756,"detailed_name":"void vex::led::led(triport::port &port)","short_name_offset":10,"short_name_size":3,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::led Led = vex::led(Brain.ThreeWirePort.A);}\r\n@brief Creates a new led object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"560:9-560:12|35|2|1","param_spellings":["560:29-560:33"]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":70,"usr":17180230655620356450,"detailed_name":"void vex::led::~led()","short_name_offset":15,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"561:9-561:13|35|2|1","param_spellings":[]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":71,"usr":8225869693394134951,"detailed_name":"void vex::led::on()","short_name_offset":15,"short_name_size":2,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Led.on();}\r\n@brief Sets the led device to the on state.","declarations":[{"spell":"569:19-569:21|35|2|1","param_spellings":[]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":72,"usr":8969551778752391066,"detailed_name":"void vex::led::off()","short_name_offset":15,"short_name_size":3,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Led.off();}\r\n@brief Sets the led device to the off state.","declarations":[{"spell":"577:19-577:22|35|2|1","param_spellings":[]}],"declaring_type":35,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":73,"usr":10949353632989872689,"detailed_name":"void vex::pneumatics::pneumatics(triport::port &port)","short_name_offset":10,"short_name_size":10,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::pneumatics Pneumatics = vex::pneumatics(Brain.ThreeWirePort.A);}\r\n@brief Creates a new pneumatics object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"594:9-594:19|36|2|1","param_spellings":["594:36-594:40"]}],"declaring_type":36,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":74,"usr":2510851391905025825,"detailed_name":"void vex::pneumatics::~pneumatics()","short_name_offset":22,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"595:9-595:20|36|2|1","param_spellings":[]}],"declaring_type":36,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":75,"usr":14674412131819825978,"detailed_name":"void vex::pneumatics::open()","short_name_offset":22,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Pneumatics.open();}\r\n@brief Sets the pneumatics device to the solenoid open state allowing air to flow into the cylinder.","declarations":[{"spell":"603:19-603:23|36|2|1","param_spellings":[]}],"declaring_type":36,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":76,"usr":5820201929176217332,"detailed_name":"void vex::pneumatics::close()","short_name_offset":22,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Pneumatics.close();}\r\n@brief Sets the pneumatics device to the solenoid close state stopping air flowing into the cylinder.","declarations":[{"spell":"611:19-611:24|36|2|1","param_spellings":[]}],"declaring_type":36,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":77,"usr":1566374075531847638,"detailed_name":"void vex::pot::pot(triport::port &port)","short_name_offset":10,"short_name_size":3,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::pot Pot = vex::pot(Brain.ThreeWirePort.A);}\r\n@brief Creates a new pot object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"629:9-629:12|23|2|1","param_spellings":["629:29-629:33"]}],"declaring_type":23,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":78,"usr":4850866754560276200,"detailed_name":"void vex::pot::~pot()","short_name_offset":15,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"630:9-630:13|23|2|1","param_spellings":[]}],"declaring_type":23,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":79,"usr":17972016260335326308,"detailed_name":"int32_t vex::pot::value(vex::analogUnits units)","short_name_offset":18,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Pot.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the potentiometer in the units defined in the parameter.\r\n@return Returns an integer that represents the unit value specified by the parameter of the potentiometer device.\r\n@param units The measurement unit for the potentiometer device.","declarations":[{"spell":"640:19-640:24|23|2|1","param_spellings":["640:38-640:43"]}],"declaring_type":23,"bases":[],"derived":[],"vars":[],"uses":["652:18-652:23|80|3|32"],"callees":[]},{"id":80,"usr":14593166862705151681,"detailed_name":"int32_t vex::pot::value(vex::percentUnits units)","short_name_offset":18,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Pot.value(percent)}\r\n@cpp_sig{Pot.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the potentiometer in the units defined in the parameter.\r\n@return Returns an integer that represents the unit value specified by the parameter of the potentiometer device.\r\n@param units The measurement unit for the potentiometer device.","declarations":[],"spell":"651:19-651:24|23|2|2","extent":"651:9-653:10|23|2|0","declaring_type":23,"bases":[],"derived":[],"vars":[40],"uses":[],"callees":["652:18-652:23|79|3|32"]},{"id":81,"usr":15132793344327257959,"detailed_name":"double vex::pot::value(vex::rotationUnits units)","short_name_offset":17,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Pot.value(degrees)}\r\n@cpp_sig{Pot.value(vex::rotationUnits::deg)}\r\n@brief Gets the value of the potentiometer in the units defined in the parameter.\r\n@return Returns an integer that represents the unit value specified by the parameter of the potentiometer device.\r\n@param units The measurement unit for the potentiometer device.","declarations":[{"spell":"664:19-664:24|23|2|1","param_spellings":["664:40-664:45"]}],"declaring_type":23,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":82,"usr":5876864637826333949,"detailed_name":"void vex::pot::changed(void (*)() callback)","short_name_offset":15,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Pot.changed(changedFunction);}\r\n@brief Calls a function when the potentiometer value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"673:19-673:26|23|2|1","param_spellings":["673:36-673:44"]}],"declaring_type":23,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":83,"usr":14228733995734046693,"detailed_name":"void vex::line::line(triport::port &port)","short_name_offset":10,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::line Line = vex::line(Brain.ThreeWirePort.A);}\r\n@brief Creates a new line object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"691:9-691:13|24|2|1","param_spellings":["691:30-691:34"]}],"declaring_type":24,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":84,"usr":8433345819697099490,"detailed_name":"void vex::line::~line()","short_name_offset":16,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"692:9-692:14|24|2|1","param_spellings":[]}],"declaring_type":24,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":85,"usr":9853801528549978736,"detailed_name":"int32_t vex::line::value(vex::analogUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Line.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the line follower.\r\n@return Returns an integer that represents the unit value specified by the parameter of the line follower.\r\n@param units The measurement unit for the line device.","declarations":[{"spell":"701:19-701:24|24|2|1","param_spellings":["701:38-701:43"]}],"declaring_type":24,"bases":[],"derived":[],"vars":[],"uses":["713:18-713:23|86|3|32"],"callees":[]},{"id":86,"usr":17753122182496527714,"detailed_name":"int32_t vex::line::value(vex::percentUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Line.value(percent)}\r\n@cpp_sig{Line.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the line follower.\r\n@return Returns an integer that represents the unit value specified by the parameter of the line follower.\r\n@param units The measurement unit for the line device.","declarations":[],"spell":"712:19-712:24|24|2|2","extent":"712:9-714:10|24|2|0","declaring_type":24,"bases":[],"derived":[],"vars":[43],"uses":[],"callees":["713:18-713:23|85|3|32"]},{"id":87,"usr":6016968260091259377,"detailed_name":"void vex::line::changed(void (*)() callback)","short_name_offset":16,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Line.changed(changedFunction);}\r\n@brief Calls a function when the line sensor value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"723:19-723:26|24|2|1","param_spellings":["723:36-723:44"]}],"declaring_type":24,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":88,"usr":16936389650215473329,"detailed_name":"void vex::light::light(triport::port &port)","short_name_offset":10,"short_name_size":5,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::light Light = vex::light(Brain.ThreeWirePort.A);}\r\n@brief Creates a new light object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"741:9-741:14|25|2|1","param_spellings":["741:31-741:35"]}],"declaring_type":25,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":89,"usr":2779740572934179208,"detailed_name":"void vex::light::~light()","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"742:9-742:15|25|2|1","param_spellings":[]}],"declaring_type":25,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":90,"usr":13350393414209647609,"detailed_name":"int32_t vex::light::value(vex::analogUnits units)","short_name_offset":20,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Light.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the light sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the light sensor.\r\n@param units The measurement unit for the light device.","declarations":[{"spell":"752:19-752:24|25|2|1","param_spellings":["752:38-752:43"]}],"declaring_type":25,"bases":[],"derived":[],"vars":[],"uses":["764:18-764:23|91|3|32"],"callees":[]},{"id":91,"usr":7577288956688741652,"detailed_name":"int32_t vex::light::value(vex::percentUnits units)","short_name_offset":20,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Light.value(percent)}\r\n@cpp_sig{Light.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the light sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the light sensor.\r\n@param units The measurement unit for the light device.","declarations":[],"spell":"763:19-763:24|25|2|2","extent":"763:9-765:10|25|2|0","declaring_type":25,"bases":[],"derived":[],"vars":[45],"uses":[],"callees":["764:18-764:23|90|3|32"]},{"id":92,"usr":3140607501656135984,"detailed_name":"void vex::light::changed(void (*)() callback)","short_name_offset":17,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Light.changed(changedFunction);}\r\n@brief Calls a function when the light sensor value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"774:19-774:26|25|2|1","param_spellings":["774:36-774:44"]}],"declaring_type":25,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":93,"usr":13671416634657603273,"detailed_name":"void vex::gyro::gyro(triport::port &port)","short_name_offset":10,"short_name_size":4,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::gyro Gyro = vex::gyro(Brain.ThreeWirePort.A);}\r\n@brief Creates a new gyro object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"795:9-795:13|26|2|1","param_spellings":["795:30-795:34"]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":94,"usr":896826155132529497,"detailed_name":"void vex::gyro::~gyro()","short_name_offset":16,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"796:9-796:14|26|2|1","param_spellings":[]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":95,"usr":14087569089855970355,"detailed_name":"int32_t vex::gyro::value(vex::analogUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the gyro sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[{"spell":"806:19-806:24|26|2|1","param_spellings":["806:38-806:43"]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":["829:18-829:23|97|3|32"],"callees":[]},{"id":96,"usr":13726596358966504655,"detailed_name":"double vex::gyro::value(vex::rotationUnits units)","short_name_offset":18,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.value(degrees)}\r\n@cpp_sig{Gyro.value(vex::rotationUnits::deg)}\r\n@brief Gets the value of the gyro sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[{"spell":"817:19-817:24|26|2|1","param_spellings":["817:40-817:45"]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":97,"usr":10264021343337370007,"detailed_name":"int32_t vex::gyro::value(vex::percentUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.value(percent)}\r\n@cpp_sig{Gyro.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the gyro sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[],"spell":"828:19-828:24|26|2|2","extent":"828:9-830:10|26|2|0","declaring_type":26,"bases":[],"derived":[],"vars":[48],"uses":[],"callees":["829:18-829:23|95|3|32"]},{"id":98,"usr":17039058117830362694,"detailed_name":"void vex::gyro::startCalibration(int32_t value)","short_name_offset":16,"short_name_size":16,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{action}\r\n@block_sig{Gyro.startCalibration()}\r\n@brief Starts recalibration of the gyro.\r\n@param value (Optional) Sets the amount of calibration time. By default, this parameter is zero.","declarations":[{"spell":"839:19-839:35|26|2|1","param_spellings":["839:45-839:50"]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":99,"usr":8790874470527282738,"detailed_name":"bool vex::gyro::isCalibrating()","short_name_offset":16,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.isCalibrating()}\r\n@brief Returns true while the gyro sensor is performing a requested recalibration, changing to false once recalibration has completed.\r\n@return Returns true if gyro is still calibrating.","declarations":[{"spell":"848:19-848:32|26|2|1","param_spellings":[]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":100,"usr":2094042572219624965,"detailed_name":"void vex::gyro::changed(void (*)() callback)","short_name_offset":16,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Gyro.changed(changedFunction);}\r\n@brief Calls a function when the gyro sensor value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"857:19-857:26|26|2|1","param_spellings":["857:36-857:44"]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":101,"usr":5166967140824080118,"detailed_name":"void vex::gyro::resetAngle()","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief reset the gyro sensor angle to 0","declarations":[{"spell":"862:19-862:29|26|2|1","param_spellings":[]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":102,"usr":9769925796568468503,"detailed_name":"void vex::gyro::resetAngle(double value, vex::rotationUnits units)","short_name_offset":16,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief reset the gyro sensor angle to angle\r\n@param value The new absolute angle for the gyro\r\n@param units The rotation unit for the angle","declarations":[{"spell":"869:19-869:29|26|2|1","param_spellings":["869:38-869:43","869:59-869:64"]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":103,"usr":12733542326215913222,"detailed_name":"double vex::gyro::angle(vex::rotationUnits units)","short_name_offset":18,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief Gets the angle of the gyro sensor.\r\n@return Returns a double that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[{"spell":"876:19-876:24|26|2|1","param_spellings":["876:40-876:45"]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":104,"usr":8423896004716184740,"detailed_name":"double vex::gyro::angleAbs(vex::rotationUnits units)","short_name_offset":18,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@brief Gets the absolute angle of the gyro sensor.\r\n@return Returns a double that represents the unit value specified by the parameter of the gyro sensor.\r\n@param units The measurement unit for the gyro device.","declarations":[{"spell":"883:19-883:27|26|2|1","param_spellings":["883:43-883:48"]}],"declaring_type":26,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":105,"usr":16946978647779901381,"detailed_name":"void vex::accelerometer::accelerometer(triport::port &port)","short_name_offset":10,"short_name_size":13,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::accelerometer Accelerometer = vex::accelerometer(Brain.ThreeWirePort.A);}\r\n@brief Creates a new accelerometer object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"901:9-901:22|27|2|1","param_spellings":["901:39-901:43"]}],"declaring_type":27,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":106,"usr":9839307172924070096,"detailed_name":"void vex::accelerometer::~accelerometer()","short_name_offset":25,"short_name_size":14,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"902:9-902:23|27|2|1","param_spellings":[]}],"declaring_type":27,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":107,"usr":3423262237135850349,"detailed_name":"int32_t vex::accelerometer::value(vex::analogUnits units)","short_name_offset":28,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Accelerometer.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the accelerometer.\r\n@return Returns an integer that represents the unit value specified by the parameter of the accelerometer sensor.\r\n@param units The measurement unit for the accelerometer device.","declarations":[{"spell":"911:19-911:24|27|2|1","param_spellings":["911:38-911:43"]}],"declaring_type":27,"bases":[],"derived":[],"vars":[],"uses":["923:18-923:23|108|3|32"],"callees":[]},{"id":108,"usr":4718216744014172748,"detailed_name":"int32_t vex::accelerometer::value(vex::percentUnits units)","short_name_offset":28,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Accelerometer.value(percent)}\r\n@cpp_sig{Accelerometer.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the accelerometer.\r\n@return Returns an integer that represents the unit value specified by the parameter of the accelerometer sensor.\r\n@param units The measurement unit for the accelerometer device.","declarations":[],"spell":"922:19-922:24|27|2|2","extent":"922:9-924:10|27|2|0","declaring_type":27,"bases":[],"derived":[],"vars":[51],"uses":[],"callees":["923:18-923:23|107|3|32"]},{"id":109,"usr":8279707948628253362,"detailed_name":"void vex::accelerometer::changed(void (*)() callback)","short_name_offset":25,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Accelerometer.changed(changedFunction);}\r\n@brief Calls a function when the accelerometer value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"933:19-933:26|27|2|1","param_spellings":["933:36-933:44"]}],"declaring_type":27,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":110,"usr":7965305978017738926,"detailed_name":"void vex::analog_in::analog_in(triport::port &port)","short_name_offset":10,"short_name_size":9,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::analog_in Analog_in = vex::analog_in(Brain.ThreeWirePort.A);}\r\n@brief Creates a new analog-in object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"951:9-951:18|28|2|1","param_spellings":["951:35-951:39"]}],"declaring_type":28,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":111,"usr":2675072086298285676,"detailed_name":"void vex::analog_in::~analog_in()","short_name_offset":21,"short_name_size":10,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"952:9-952:19|28|2|1","param_spellings":[]}],"declaring_type":28,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":112,"usr":8806569960141111853,"detailed_name":"int32_t vex::analog_in::value(vex::analogUnits units)","short_name_offset":24,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Analog.value(vex::analogUnits::range8bit)}\r\n@brief Gets the value of the analog-in device.\r\n@return Returns an integer that represents the unit value specified by the parameter of the analog-in device.\r\n@param units The measurement unit for the analog-in device.","declarations":[{"spell":"962:19-962:24|28|2|1","param_spellings":["962:38-962:43"]}],"declaring_type":28,"bases":[],"derived":[],"vars":[],"uses":["973:18-973:23|113|3|32"],"callees":[]},{"id":113,"usr":14069155537758725007,"detailed_name":"int32_t vex::analog_in::value(vex::percentUnits units)","short_name_offset":24,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Analog.value(percent)}\r\n@cpp_sig{Analog.value(vex::percentUnits::pct)}\r\n@brief Gets the value of the analog-in device.\r\n@return Returns an integer that represents the unit value specified by the parameter of the analog-in device.\r\n@param units The measurement unit for the analog-in device.","declarations":[],"spell":"972:19-972:24|28|2|2","extent":"972:9-974:10|28|2|0","declaring_type":28,"bases":[],"derived":[],"vars":[53],"uses":[],"callees":["973:18-973:23|112|3|32"]},{"id":114,"usr":9111871247083934825,"detailed_name":"void vex::analog_in::changed(void (*)() callback)","short_name_offset":21,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Analog.changed(changedFunction);}\r\n@brief Calls a function when the analog input value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"983:19-983:26|28|2|1","param_spellings":["983:36-983:44"]}],"declaring_type":28,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":115,"usr":10958324432790383774,"detailed_name":"void vex::encoder::encoder(triport::port &port)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::encoder Encoder = vex::encoder(Brain.ThreeWirePort.A);}\r\n@brief Creates a new encoder object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1001:9-1001:16|29|2|1","param_spellings":["1001:33-1001:37"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":116,"usr":16899168643133051834,"detailed_name":"void vex::encoder::~encoder()","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1002:9-1002:17|29|2|1","param_spellings":[]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":117,"usr":12520601331352478690,"detailed_name":"int32_t vex::encoder::value()","short_name_offset":22,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{Encoder.value()}\r\n@brief Gets the value of the encoder.\r\n@return Returns an integer that represents the value of the encoder device.","declarations":[{"spell":"1011:19-1011:24|29|2|1","param_spellings":[]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":118,"usr":11972935850275239342,"detailed_name":"int vex::encoder::operator int()","short_name_offset":18,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1012:9-1012:21|29|2|1","param_spellings":[]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":119,"usr":7255753173177116254,"detailed_name":"void vex::encoder::resetRotation()","short_name_offset":19,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro}\r\n @drawer_cat{setting}\r\n @block_sig{Encoder.resetRotation();}\r\n @brief Resets the rotation of the encoder to zero.","declarations":[{"spell":"1020:17-1020:30|29|2|1","param_spellings":[]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":120,"usr":16285687276678208694,"detailed_name":"void vex::encoder::setRotation(double val, vex::rotationUnits units)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n @prog_lang{block|cpp|pro}\r\n @drawer_cat{setting}\r\n @block_sig{Encoder.setRotation(90, degrees);}\r\n @cpp_sig{Encoder.setRotation(90, vex::rotationUnits::deg);}\r\n @brief Sets the rotation of the encoder to a specific value.\r\n @param val Sets the amount of rotation.\r\n @param units The measurement unit for the rotation value.","declarations":[{"spell":"1031:17-1031:28|29|2|1","param_spellings":["1031:37-1031:40","1031:56-1031:61"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":121,"usr":2729947645988024595,"detailed_name":"double vex::encoder::rotation(vex::rotationUnits units)","short_name_offset":21,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Encoder.rotation(degrees)}\r\n@cpp_sig{Encoder.rotation(vex::rotationUnits::deg)}\r\n@brief Gets the rotation value of the encoder.\r\n@return Returns a double that represents the current rotation of the encoder.\r\n@param units The measurement unit for the encoder device.","declarations":[{"spell":"1042:17-1042:25|29|2|1","param_spellings":["1042:41-1042:46"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":122,"usr":16643432974469646568,"detailed_name":"double vex::encoder::velocity(vex::velocityUnits units)","short_name_offset":21,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Encoder.velocity(rpm)}\r\n@cpp_sig{Encoder.velocity(vex::velocityUnits::rpm)}\r\n@brief Gets the velocity of the encoder.\r\n@return Returns a double that represents the current velocity of the encoder.\r\n@param units The measurement unit for the encoder device.","declarations":[{"spell":"1053:17-1053:25|29|2|1","param_spellings":["1053:41-1053:46"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":123,"usr":12978354596891411763,"detailed_name":"void vex::encoder::changed(void (*)() callback)","short_name_offset":19,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Encoder.changed(changedFunction);}\r\n@brief Calls a function when the encoder value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"1062:19-1062:26|29|2|1","param_spellings":["1062:36-1062:44"]}],"declaring_type":29,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":124,"usr":14519203849641320913,"detailed_name":"void vex::sonar::sonar(triport::port &port)","short_name_offset":10,"short_name_size":5,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::sonar Sonar = vex::sonar(Brain.ThreeWirePort.A);}\r\n@brief Creates a new sonar object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1080:9-1080:14|30|2|1","param_spellings":["1080:31-1080:35"]}],"declaring_type":30,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":125,"usr":8197076092443673648,"detailed_name":"void vex::sonar::~sonar()","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1081:9-1081:15|30|2|1","param_spellings":[]}],"declaring_type":30,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":126,"usr":8285478633997514509,"detailed_name":"int32_t vex::sonar::value()","short_name_offset":20,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{none}\r\n@drawer_cat{none}\r\n@block_sig{Sonar.value();}\r\n@brief Gets the value of the distance sensor.\r\n@return Returns an integer that represents the value of the sonar sensor.","declarations":[{"spell":"1090:19-1090:24|30|2|1","param_spellings":[]}],"declaring_type":30,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":127,"usr":10328805431175894358,"detailed_name":"int vex::sonar::operator int()","short_name_offset":16,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1091:9-1091:21|30|2|1","param_spellings":[]}],"declaring_type":30,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":128,"usr":8526270364967401522,"detailed_name":"double vex::sonar::distance(vex::distanceUnits units)","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Sonar.distance(millimeters)}\r\n@cpp_sig{Sonar.distance(vex::distanceUnits::mm)}\r\n@brief Gets the value of the distance sensor.\r\n@return Returns an integer that represents the unit value specified by the parameter of the sonar sensor. \r\n@param units The measurement unit for the sonar device.","declarations":[{"spell":"1102:17-1102:25|30|2|1","param_spellings":["1102:41-1102:46"]}],"declaring_type":30,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":129,"usr":5651259773832987290,"detailed_name":"void vex::sonar::changed(void (*)() callback)","short_name_offset":17,"short_name_size":7,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{sensing}\r\n@block_sig{Sonar.changed(changedFunction);}\r\n@brief Calls a function when the sonar value changes.\r\n@param callback A reference to a function.","declarations":[{"spell":"1111:19-1111:26|30|2|1","param_spellings":["1111:36-1111:44"]}],"declaring_type":30,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":130,"usr":9352960571017475229,"detailed_name":"void vex::pwm_out::pwm_out(triport::port &port)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::pwm_out Pwm_out = pwm_out(Brain.ThreeWirePort.A);}\r\n@brief Creates a new pwm-out object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1129:9-1129:16|31|2|1","param_spellings":["1129:33-1129:37"]}],"declaring_type":31,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":131,"usr":13837563659924262435,"detailed_name":"void vex::pwm_out::~pwm_out()","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1130:9-1130:17|31|2|1","param_spellings":[]}],"declaring_type":31,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":132,"usr":701122734500102394,"detailed_name":"void vex::pwm_out::state(int32_t value, vex::percentUnits units)","short_name_offset":19,"short_name_size":5,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{PWM.state(10, percent);}\r\n@cpp_sig{PWM.state(10, vex::percentUnits::pct);}\r\n@brief Sets the state of the pwm device.\r\n@param value Sets the length of the pulse width.\r\n@param units The measurement unit for the state value.","declarations":[{"spell":"1141:14-1141:19|31|2|1","param_spellings":["1141:29-1141:34","1141:49-1141:54"]}],"declaring_type":31,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":133,"usr":3645305280785659476,"detailed_name":"void vex::servo::servo(triport::port &port)","short_name_offset":10,"short_name_size":5,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::servo Servo = vex::servo(Brain.ThreeWirePort.A);}\r\n@brief Creates a new servo object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1157:9-1157:14|32|2|1","param_spellings":["1157:31-1157:35"]}],"declaring_type":32,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":134,"usr":3348549978946911271,"detailed_name":"void vex::servo::~servo()","short_name_offset":17,"short_name_size":6,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1158:9-1158:15|32|2|1","param_spellings":[]}],"declaring_type":32,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":135,"usr":5865139955538248015,"detailed_name":"void vex::servo::position(int32_t value, vex::percentUnits units)","short_name_offset":17,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Servo.position(10, percent);}\r\n@cpp_sig{Servo.position(10, vex::percentUnits::pct);}\r\n@brief Sets the position of the servo device.\r\n@param value Sets the amount of rotation.\r\n@param units The measurement unit for the rotation value.","declarations":[{"spell":"1169:14-1169:22|32|2|1","param_spellings":["1169:32-1169:37","1169:52-1169:57"]}],"declaring_type":32,"bases":[],"derived":[],"vars":[],"uses":["1191:11-1191:19|137|3|32"],"callees":[]},{"id":136,"usr":8986935440983989563,"detailed_name":"void vex::servo::position(double value, vex::rotationUnits units)","short_name_offset":17,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Servo.position(45, vex::rotationUnits::deg);}\r\n@brief Sets the position of the servo device.\r\n@param value Sets the amount of rotation.\r\n@param units The measurement unit for the rotation value.","declarations":[{"spell":"1179:14-1179:22|32|2|1","param_spellings":["1179:31-1179:36","1179:52-1179:57"]}],"declaring_type":32,"bases":[],"derived":[],"vars":[],"uses":["1204:11-1204:19|138|3|32"],"callees":[]},{"id":137,"usr":5146836020787690052,"detailed_name":"void vex::servo::startRotateTo(int32_t value, vex::percentUnits units)","short_name_offset":17,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Servo.startRotateTo(10, percent);}\r\n@cpp_sig{Servo.startRotateTo(10, vex::percentUnits::pct);}\r\n@brief Sets the position of the servo device.\r\n@param value Sets the amount of rotation.\r\n@param units The measurement unit for the rotation value.","declarations":[],"spell":"1190:14-1190:27|32|2|2","extent":"1190:9-1192:10|32|2|0","declaring_type":32,"bases":[],"derived":[],"vars":[57,58],"uses":[],"callees":["1191:11-1191:19|135|3|32"]},{"id":138,"usr":3313612058364052691,"detailed_name":"void vex::servo::startRotateTo(double value, vex::rotationUnits units)","short_name_offset":17,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Servo.startRotateTo(45, degrees);}\r\n@cpp_sig{Servo.startRotateTo(45, vex::rotationUnits::deg);}\r\n@brief Sets the position of the servo device.\r\n@param value Sets the amount of rotation.\r\n@param units The measurement unit for the rotation value.","declarations":[],"spell":"1203:14-1203:27|32|2|2","extent":"1203:9-1205:10|32|2|0","declaring_type":32,"bases":[],"derived":[],"vars":[59,60],"uses":[],"callees":["1204:11-1204:19|136|3|32"]},{"id":139,"usr":2508949147174121721,"detailed_name":"void vex::motor29::motor29(triport::port &port)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::motor29 Motor29 = vex::motor29(Brain.ThreeWirePort.A);}\r\n@brief Creates a new motor29 object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1226:9-1226:16|33|2|1","param_spellings":["1226:33-1226:37"]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":140,"usr":3463345531640218847,"detailed_name":"void vex::motor29::motor29(triport::port &port, bool reverse)","short_name_offset":10,"short_name_size":7,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::motor29 Motor29 = vex::motor29(Brain.ThreeWirePort.A, true);}\r\n@brief Creates a new motor29 object on the port specified in the parameter.\r\n@param port A reference to a three wire port.\r\n@param reverse Sets the reverse flag for the new motor29 object.","declarations":[{"spell":"1236:9-1236:16|33|2|1","param_spellings":["1236:33-1236:37","1236:44-1236:51"]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":141,"usr":17739995577542975371,"detailed_name":"void vex::motor29::~motor29()","short_name_offset":19,"short_name_size":8,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1237:9-1237:17|33|2|1","param_spellings":[]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":142,"usr":14869516364703780020,"detailed_name":"void vex::motor29::setVelocity(double velocity, vex::percentUnits units)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Motor29.setVelocity(50, percent);}\r\n@cpp_sig{Motor29.setVelocity(50, vex::percentUnits::pct);}\r\n@brief Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor.  Any subsequent call that does not contain a specified motor velocity will use this value.\r\n@param velocity Sets the amount of velocity.\r\n@param units The measurement unit of the velocity value.","declarations":[{"spell":"1248:14-1248:25|33|2|1","param_spellings":["1248:34-1248:42","1248:57-1248:62"]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":143,"usr":12204245093605995404,"detailed_name":"void vex::motor29::setReversed(bool value)","short_name_offset":19,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Motor29.setReversed(true);}\r\n@brief Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.\r\n@param value If set to true, the motor will spin in the reversed direction.","declarations":[{"spell":"1257:14-1257:25|33|2|1","param_spellings":["1257:32-1257:37"]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":144,"usr":4631538511979078561,"detailed_name":"void vex::motor29::spin(vex::directionType dir)","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor29.spin(forward);}\r\n@cpp_sig{Motor29.spin(vex::directionType::fwd);}\r\n@brief Turns the motor on, and spins it in the specified direction.\r\n@param dir The direction to spin the motor.","declarations":[{"spell":"1267:14-1267:18|33|2|1","param_spellings":["1267:34-1267:37"]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":145,"usr":1583398685223506924,"detailed_name":"void vex::motor29::spin(vex::directionType dir, double velocity, vex::velocityUnits units)","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor29.spin(vex::directionType::fwd,50,vex::velocityUnits::rpm);}\r\n@brief Turns on the motor and spins it in a specified direction and a specified velocity.\r\n@param dir The direction to spin the motor. \r\n@param velocity Sets the amount of velocity.\r\n@param units The measurement unit of the velocity value.","declarations":[{"spell":"1278:14-1278:18|33|2|1","param_spellings":["1278:34-1278:37","1278:46-1278:54","1278:70-1278:75"]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":["1281:13-1281:17|146|3|32"],"callees":[]},{"id":146,"usr":2967393704861848004,"detailed_name":"void vex::motor29::spin(vex::directionType dir, double velocity, vex::percentUnits units)","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"1280:14-1280:18|33|2|2","extent":"1280:9-1282:10|33|2|0","declaring_type":33,"bases":[],"derived":[],"vars":[64,65,66],"uses":[],"callees":["1281:13-1281:17|145|3|32"]},{"id":147,"usr":2408979620127756034,"detailed_name":"void vex::motor29::stop()","short_name_offset":19,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor29.stop();}\r\n@brief Stops the motor using the default brake mode.","declarations":[{"spell":"1290:14-1290:18|33|2|1","param_spellings":[]}],"declaring_type":33,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":148,"usr":9429644616909034344,"detailed_name":"void vex::motor_victor::motor_victor(triport::port &port)","short_name_offset":10,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::motor_victor Motor_victor = vex::motor_victor(Brain.ThreeWirePort.A);}\r\n@brief Creates a new motor victor object on the port specified in the parameter.\r\n@param port A reference to a three wire port.","declarations":[{"spell":"1311:9-1311:21|34|2|1","param_spellings":["1311:38-1311:42"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":149,"usr":17351085211636763054,"detailed_name":"void vex::motor_victor::motor_victor(triport::port &port, bool reverse)","short_name_offset":10,"short_name_size":12,"kind":9,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{constructor}\r\n@block_sig{vex::motor_victor Motor_victor = vex::motor_victor(Brain.ThreeWirePort.A);}\r\n@brief Creates a new motor victor object on the port specified in the parameter.\r\n@param port A reference to a three wire port.\r\n@param reverse Sets the reverse flag for the new motor_victor object.","declarations":[{"spell":"1321:9-1321:21|34|2|1","param_spellings":["1321:38-1321:42","1321:49-1321:56"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":150,"usr":18061427301836335082,"detailed_name":"void vex::motor_victor::~motor_victor()","short_name_offset":24,"short_name_size":13,"kind":6,"storage":1,"hover":"","comments":"","declarations":[{"spell":"1322:9-1322:22|34|2|1","param_spellings":[]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":151,"usr":949139745843340728,"detailed_name":"void vex::motor_victor::setVelocity(double velocity, vex::percentUnits units)","short_name_offset":24,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Motor_victor.setVelocity(50, percent);}\r\n@cpp_sig{Motor_victor.setVelocity(50, vex::percentUnits::pct);}\r\n@brief Sets the velocity of the motor based on the parameters set in the command. This command will not run the motor.  Any subsequent call that does not contain a specified motor velocity will use this value.\r\n@param velocity Sets the amount of velocity.\r\n@param units The measurement unit of the velocity value.","declarations":[{"spell":"1333:14-1333:25|34|2|1","param_spellings":["1333:34-1333:42","1333:57-1333:62"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":152,"usr":13202273225213267058,"detailed_name":"void vex::motor_victor::setReversed(bool value)","short_name_offset":24,"short_name_size":11,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{setting}\r\n@block_sig{Motor_victor.setReversed(true);}\r\n@brief Sets the motor mode to \"reverse\", which will make motor commands spin the motor in the opposite direction.\r\n@param value If set to true, the motor will spin in the reversed direction.","declarations":[{"spell":"1342:14-1342:25|34|2|1","param_spellings":["1342:32-1342:37"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":153,"usr":4115722558282331593,"detailed_name":"void vex::motor_victor::spin(vex::directionType dir)","short_name_offset":24,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor_victor.spin(forward);}\r\n@cpp_sig{Motor_victor.spin(vex::directionType::fwd);}\r\n@brief Turns the motor on, and spins it in the specified direction.\r\n@param dir The direction to spin the motor.","declarations":[{"spell":"1352:14-1352:18|34|2|1","param_spellings":["1352:34-1352:37"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]},{"id":154,"usr":5521210796766574824,"detailed_name":"void vex::motor_victor::spin(vex::directionType dir, double velocity, vex::velocityUnits units)","short_name_offset":24,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor_victor.spin(vex::directionType::fwd,50,vex::velocityUnits::rpm);}\r\n@brief Turns on the motor and spins it in a specified direction and a specified velocity.\r\n@param dir The direction to spin the motor. \r\n@param velocity Sets the amount of velocity.\r\n@param units The measurement unit of the velocity value.","declarations":[{"spell":"1363:14-1363:18|34|2|1","param_spellings":["1363:34-1363:37","1363:46-1363:54","1363:70-1363:75"]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":["1366:13-1366:17|155|3|32"],"callees":[]},{"id":155,"usr":4040167837217059489,"detailed_name":"void vex::motor_victor::spin(vex::directionType dir, double velocity, vex::percentUnits units)","short_name_offset":24,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"","declarations":[],"spell":"1365:14-1365:18|34|2|2","extent":"1365:9-1367:10|34|2|0","declaring_type":34,"bases":[],"derived":[],"vars":[70,71,72],"uses":[],"callees":["1366:13-1366:17|154|3|32"]},{"id":156,"usr":16957085018948964338,"detailed_name":"void vex::motor_victor::stop()","short_name_offset":24,"short_name_size":4,"kind":6,"storage":1,"hover":"","comments":"\r\n@prog_lang{block|cpp|pro}\r\n@drawer_cat{action}\r\n@block_sig{Motor_victor.stop();}\r\n@brief Stops the motor using the default brake mode.","declarations":[{"spell":"1375:14-1375:18|34|2|1","param_spellings":[]}],"declaring_type":34,"bases":[],"derived":[],"vars":[],"uses":[],"callees":[]}],"vars":[{"id":0,"usr":13050135369189023715,"detailed_name":"vex::triport::tEventType::EVENT_DIN_HIGH","short_name_offset":26,"short_name_size":14,"hover":"vex::triport::tEventType::EVENT_DIN_HIGH = 0","comments":"","declarations":[],"spell":"33:9-33:23|4|2|2","extent":"33:9-33:35|4|2|0","type":4,"uses":["215:88-215:102|12|2|4"],"kind":22,"storage":0},{"id":1,"usr":13326008633676446165,"detailed_name":"vex::triport::tEventType::EVENT_DIN_LOW","short_name_offset":26,"short_name_size":13,"hover":"vex::triport::tEventType::EVENT_DIN_LOW = 1","comments":"","declarations":[],"spell":"34:9-34:22|4|2|2","extent":"34:9-34:35|4|2|0","type":4,"uses":["216:88-216:101|12|2|4"],"kind":22,"storage":0},{"id":2,"usr":13801557040035454413,"detailed_name":"vex::triport::tEventType::EVENT_AIN_CHANGED","short_name_offset":26,"short_name_size":17,"hover":"vex::triport::tEventType::EVENT_AIN_CHANGED = 2","comments":"","declarations":[],"spell":"35:9-35:26|4|2|2","extent":"35:9-35:35|4|2|0","type":4,"uses":["217:88-217:105|12|2|4"],"kind":22,"storage":0},{"id":3,"usr":16115055909984283465,"detailed_name":"uint32_t vex::triport::_id","short_name_offset":23,"short_name_size":3,"hover":"uint32_t vex::triport::_id = 0","comments":"","declarations":[],"spell":"39:16-39:19|2|2|2","extent":"39:7-39:23|2|2|0","type":5,"uses":["46:22-46:25|2|3|4"],"kind":8,"storage":0},{"id":4,"usr":16354803154517788372,"detailed_name":"first port","short_name_offset":6,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"45:28-45:32|2|3|2","extent":"45:22-45:32|2|3|0","uses":["46:29-46:33|2|3|4"],"kind":253,"storage":1},{"id":5,"usr":6203688047184047575,"detailed_name":"Args... args","short_name_offset":8,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"45:42-45:46|2|3|2","extent":"45:34-45:46|2|3|0","uses":["47:19-47:23|2|3|4"],"kind":253,"storage":1},{"id":6,"usr":1524749272033781207,"detailed_name":"int32_t index","short_name_offset":8,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"61:24-61:29|8|3|2","extent":"61:16-61:29|8|3|0","type":9,"uses":["61:55-61:60|8|3|4"],"kind":253,"storage":1},{"id":7,"usr":12010881951886109664,"detailed_name":"Args... args","short_name_offset":8,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"61:39-61:43|8|3|2","extent":"61:31-61:43|8|3|0","uses":["62:19-62:23|8|3|4"],"kind":253,"storage":1},{"id":8,"usr":11569330319738348054,"detailed_name":"int32_t vex::triport::port::_id","short_name_offset":28,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"80:21-80:24|12|2|2","extent":"80:11-80:24|12|2|0","type":9,"uses":["87:20-87:23|13|3|4","215:109-215:112|12|2|4","216:109-216:112|12|2|4","217:109-217:112|12|2|4"],"kind":8,"storage":0},{"id":9,"usr":796573514584753131,"detailed_name":"vex::triportType vex::triport::port::_type","short_name_offset":37,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"81:23-81:28|12|2|2","extent":"81:11-81:28|12|2|0","type":6,"uses":["87:31-87:36|13|3|4"],"kind":8,"storage":0},{"id":10,"usr":18069680756641107073,"detailed_name":"vex::triport *vex::triport::port::_parent","short_name_offset":34,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"82:22-82:29|12|2|2","extent":"82:11-82:29|12|2|0","type":2,"uses":["87:65-87:72|13|3|4","215:43-215:50|12|2|4","216:43-216:50|12|2|4","217:43-217:50|12|2|4"],"kind":8,"storage":0},{"id":11,"usr":14821990910703610732,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["87:50-87:62|13|3|4"],"kind":0,"storage":0},{"id":12,"usr":7572779283333524438,"detailed_name":"const vex::triportType type","short_name_offset":23,"short_name_size":4,"hover":"","comments":"","declarations":[],"spell":"158:46-158:50|25|3|2","extent":"158:28-158:50|25|3|0","type":6,"uses":["159:25-159:29|25|3|4"],"kind":253,"storage":1},{"id":13,"usr":7500808922800133124,"detailed_name":"const int32_t value","short_name_offset":14,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"161:41-161:46|26|3|2","extent":"161:27-161:46|26|3|0","type":9,"uses":["162:26-162:31|26|3|4"],"kind":253,"storage":1},{"id":14,"usr":8910779791458941181,"detailed_name":"vex::mevent vex::triport::port::PRESSED","short_name_offset":32,"short_name_size":7,"hover":"vex::mevent vex::triport::port::PRESSED   = { (uint32_t)_parent->_getIndex(), ((uint32_t)tEventType::EVENT_DIN_HIGH    + (_id<<2)) }","comments":"","declarations":[],"spell":"215:19-215:26|12|2|2","extent":"215:11-215:119|12|2|0","type":18,"uses":["219:31-219:38|12|2|4","317:36-317:43|13|2|4"],"kind":8,"storage":0},{"id":15,"usr":15389955698783924606,"detailed_name":"vex::mevent vex::triport::port::RELEASED","short_name_offset":32,"short_name_size":8,"hover":"vex::mevent vex::triport::port::RELEASED  = { (uint32_t)_parent->_getIndex(), ((uint32_t)tEventType::EVENT_DIN_LOW     + (_id<<2)) }","comments":"","declarations":[],"spell":"216:19-216:27|12|2|2","extent":"216:11-216:119|12|2|0","type":18,"uses":["220:31-220:39|12|2|4","318:36-318:44|13|2|4"],"kind":8,"storage":0},{"id":16,"usr":16168570386645455610,"detailed_name":"vex::mevent vex::triport::port::CHANGED","short_name_offset":32,"short_name_size":7,"hover":"vex::mevent vex::triport::port::CHANGED   = { (uint32_t)_parent->_getIndex(), ((uint32_t)tEventType::EVENT_AIN_CHANGED + (_id<<2)) }","comments":"","declarations":[],"spell":"217:19-217:26|12|2|2","extent":"217:11-217:119|12|2|0","type":18,"uses":["319:36-319:43|13|2|4"],"kind":8,"storage":0},{"id":17,"usr":6287274931713025569,"detailed_name":"vex::mevent &vex::triport::port::HIGH","short_name_offset":33,"short_name_size":4,"hover":"vex::mevent &vex::triport::port::HIGH     = PRESSED","comments":"","declarations":[],"spell":"219:20-219:24|12|2|2","extent":"219:11-219:38|12|2|0","type":18,"uses":["320:36-320:40|13|2|4"],"kind":8,"storage":0},{"id":18,"usr":9860440264544795197,"detailed_name":"vex::mevent &vex::triport::port::LOW","short_name_offset":33,"short_name_size":3,"hover":"vex::mevent &vex::triport::port::LOW      = RELEASED","comments":"","declarations":[],"spell":"220:20-220:23|12|2|2","extent":"220:11-220:39|12|2|0","type":18,"uses":["321:36-321:39|13|2|4"],"kind":8,"storage":0},{"id":19,"usr":5147521078109537289,"detailed_name":"vex::triport::port [8] vex::triport::Port","short_name_offset":37,"short_name_size":4,"hover":"","comments":"A triport device has 8 ports\r\nThis creates those instances and associates them with this triport","declarations":[],"spell":"225:12-225:16|2|2|2","extent":"225:7-233:23|2|2|0","type":12,"uses":["243:18-243:22|2|2|4","249:18-249:22|2|2|4","255:18-255:22|2|2|4","261:18-261:22|2|2|4","267:18-267:22|2|2|4","273:18-273:22|2|2|4","279:18-279:22|2|2|4","285:18-285:22|2|2|4"],"kind":8,"storage":0},{"id":20,"usr":6022357643659404472,"detailed_name":"vex::triport::port &vex::triport::A","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::A = Port[0]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as A on the Brain.","declarations":[],"spell":"243:14-243:15|2|2|2","extent":"243:7-243:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":21,"usr":12353844188789262999,"detailed_name":"vex::triport::port &vex::triport::B","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::B = Port[1]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as B on the Brain.","declarations":[],"spell":"249:14-249:15|2|2|2","extent":"249:7-249:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":22,"usr":5713690696216866844,"detailed_name":"vex::triport::port &vex::triport::C","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::C = Port[2]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as C on the Brain.","declarations":[],"spell":"255:14-255:15|2|2|2","extent":"255:7-255:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":23,"usr":750259209699402755,"detailed_name":"vex::triport::port &vex::triport::D","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::D = Port[3]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as D on the Brain.","declarations":[],"spell":"261:14-261:15|2|2|2","extent":"261:7-261:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":24,"usr":7104566130567617180,"detailed_name":"vex::triport::port &vex::triport::E","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::E = Port[4]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as E on the Brain.","declarations":[],"spell":"267:14-267:15|2|2|2","extent":"267:7-267:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":25,"usr":3330068417595126656,"detailed_name":"vex::triport::port &vex::triport::F","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::F = Port[5]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as F on the Brain.","declarations":[],"spell":"273:14-273:15|2|2|2","extent":"273:7-273:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":26,"usr":18089155573520437523,"detailed_name":"vex::triport::port &vex::triport::G","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::G = Port[6]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as G on the Brain.","declarations":[],"spell":"279:14-279:15|2|2|2","extent":"279:7-279:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":27,"usr":9706211901558078131,"detailed_name":"vex::triport::port &vex::triport::H","short_name_offset":34,"short_name_size":1,"hover":"vex::triport::port &vex::triport::H = Port[7]","comments":"\r\n@prog_lang{pro}\r\n@drawer_cat{none}\r\n@brief A Three Wire Port that is labeled as H on the Brain.","declarations":[],"spell":"285:14-285:15|2|2|2","extent":"285:7-285:25|2|2|0","type":12,"uses":[],"kind":8,"storage":0},{"id":28,"usr":3631442292982244862,"detailed_name":"triport::port &vex::__tridevice::_port","short_name_offset":33,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"312:26-312:31|13|2|2","extent":"312:9-312:31|13|2|0","type":12,"uses":["317:30-317:35|13|2|4","318:30-318:35|13|2|4","319:30-319:35|13|2|4","320:30-320:35|13|2|4","321:30-321:35|13|2|4"],"kind":8,"storage":0},{"id":29,"usr":6860498277106925465,"detailed_name":"vex::mevent &vex::__tridevice::_PRESSED","short_name_offset":31,"short_name_size":8,"hover":"vex::mevent &vex::__tridevice::_PRESSED   = _port.PRESSED","comments":"","declarations":[],"spell":"317:17-317:25|13|2|2","extent":"317:9-317:43|13|2|0","type":18,"uses":["385:29-385:37|19|2|4","444:29-444:37|20|2|4"],"kind":8,"storage":0},{"id":30,"usr":9503637556782317327,"detailed_name":"vex::mevent &vex::__tridevice::_RELEASED","short_name_offset":31,"short_name_size":9,"hover":"vex::mevent &vex::__tridevice::_RELEASED  = _port.RELEASED","comments":"","declarations":[],"spell":"318:17-318:26|13|2|2","extent":"318:9-318:44|13|2|0","type":18,"uses":["386:29-386:38|19|2|4","445:29-445:38|20|2|4"],"kind":8,"storage":0},{"id":31,"usr":5733532014542949696,"detailed_name":"vex::mevent &vex::__tridevice::_CHANGED","short_name_offset":31,"short_name_size":8,"hover":"vex::mevent &vex::__tridevice::_CHANGED   = _port.CHANGED","comments":"","declarations":[],"spell":"319:17-319:25|13|2|2","extent":"319:9-319:43|13|2|0","type":18,"uses":["675:29-675:37|23|2|4","725:29-725:37|24|2|4","776:29-776:37|25|2|4","885:29-885:37|26|2|4","935:29-935:37|27|2|4","985:29-985:37|28|2|4","1064:29-1064:37|29|2|4","1113:29-1113:37|30|2|4"],"kind":8,"storage":0},{"id":32,"usr":7332950105196548259,"detailed_name":"vex::mevent &vex::__tridevice::_HIGH","short_name_offset":31,"short_name_size":5,"hover":"vex::mevent &vex::__tridevice::_HIGH      = _port.HIGH","comments":"","declarations":[],"spell":"320:17-320:22|13|2|2","extent":"320:9-320:40|13|2|0","type":18,"uses":["497:29-497:34|21|2|4"],"kind":8,"storage":0},{"id":33,"usr":18294739802784724953,"detailed_name":"vex::mevent &vex::__tridevice::_LOW","short_name_offset":31,"short_name_size":4,"hover":"vex::mevent &vex::__tridevice::_LOW       = _port.LOW","comments":"","declarations":[],"spell":"321:17-321:21|13|2|2","extent":"321:9-321:39|13|2|0","type":18,"uses":["496:29-496:33|21|2|4"],"kind":8,"storage":0},{"id":34,"usr":8698287612528078346,"detailed_name":"vex::mevent &vex::limit::PRESSED","short_name_offset":25,"short_name_size":7,"hover":"vex::mevent &vex::limit::PRESSED   = _PRESSED","comments":"","declarations":[],"spell":"385:17-385:24|19|2|2","extent":"385:9-385:37|19|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":35,"usr":1249823126084308175,"detailed_name":"vex::mevent &vex::limit::RELEASED","short_name_offset":25,"short_name_size":8,"hover":"vex::mevent &vex::limit::RELEASED  = _RELEASED","comments":"","declarations":[],"spell":"386:17-386:25|19|2|2","extent":"386:9-386:38|19|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":36,"usr":15259598941190089326,"detailed_name":"vex::mevent &vex::bumper::PRESSED","short_name_offset":26,"short_name_size":7,"hover":"vex::mevent &vex::bumper::PRESSED   = _PRESSED","comments":"","declarations":[],"spell":"444:17-444:24|20|2|2","extent":"444:9-444:37|20|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":37,"usr":6958973023128549130,"detailed_name":"vex::mevent &vex::bumper::RELEASED","short_name_offset":26,"short_name_size":8,"hover":"vex::mevent &vex::bumper::RELEASED  = _RELEASED","comments":"","declarations":[],"spell":"445:17-445:25|20|2|2","extent":"445:9-445:38|20|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":38,"usr":13850597790520333191,"detailed_name":"vex::mevent &vex::digital_in::HIGH","short_name_offset":30,"short_name_size":4,"hover":"vex::mevent &vex::digital_in::HIGH     = _LOW","comments":"digital in needs inversion\r\nADI inverts digital inputs so switch press is seen as high","declarations":[],"spell":"496:18-496:22|21|2|2","extent":"496:9-496:33|21|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":39,"usr":945695254773085945,"detailed_name":"vex::mevent &vex::digital_in::LOW","short_name_offset":30,"short_name_size":3,"hover":"vex::mevent &vex::digital_in::LOW      = _HIGH","comments":"","declarations":[],"spell":"497:18-497:21|21|2|2","extent":"497:9-497:34|21|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":40,"usr":12730083994834376719,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"651:39-651:44|80|3|2","extent":"651:26-651:44|80|3|0","type":37,"uses":[],"kind":253,"storage":1},{"id":41,"usr":15095542392506504909,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["652:38-652:41|80|3|4","713:38-713:41|86|3|4","764:38-764:41|91|3|4","829:38-829:41|97|3|4","923:38-923:41|108|3|4","973:38-973:41|113|3|4"],"kind":0,"storage":0},{"id":42,"usr":8196411086303142654,"detailed_name":"vex::mevent &vex::pot::CHANGED","short_name_offset":23,"short_name_size":7,"hover":"vex::mevent &vex::pot::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"675:17-675:24|23|2|2","extent":"675:9-675:37|23|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":43,"usr":10242959277519609008,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"712:39-712:44|86|3|2","extent":"712:26-712:44|86|3|0","type":37,"uses":[],"kind":253,"storage":1},{"id":44,"usr":13738407683588204287,"detailed_name":"vex::mevent &vex::line::CHANGED","short_name_offset":24,"short_name_size":7,"hover":"vex::mevent &vex::line::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"725:17-725:24|24|2|2","extent":"725:9-725:37|24|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":45,"usr":18170946319989345156,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"763:39-763:44|91|3|2","extent":"763:26-763:44|91|3|0","type":37,"uses":[],"kind":253,"storage":1},{"id":46,"usr":14867530165869800149,"detailed_name":"vex::mevent &vex::light::CHANGED","short_name_offset":25,"short_name_size":7,"hover":"vex::mevent &vex::light::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"776:17-776:24|25|2|2","extent":"776:9-776:37|25|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":47,"usr":8396426714491778514,"detailed_name":"int32_t vex::gyro::_offset","short_name_offset":19,"short_name_size":7,"hover":"","comments":"","declarations":[],"spell":"784:25-784:32|26|2|2","extent":"784:9-784:32|26|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":48,"usr":2235036166571451034,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"828:39-828:44|97|3|2","extent":"828:26-828:44|97|3|0","type":37,"uses":[],"kind":253,"storage":1},{"id":49,"usr":1126757257207621049,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["876:63-876:66|26|2|4","883:66-883:69|26|2|4"],"kind":0,"storage":0},{"id":50,"usr":2638745284551699160,"detailed_name":"vex::mevent &vex::gyro::CHANGED","short_name_offset":24,"short_name_size":7,"hover":"vex::mevent &vex::gyro::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"885:17-885:24|26|2|2","extent":"885:9-885:37|26|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":51,"usr":2752160246308892936,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"922:39-922:44|108|3|2","extent":"922:26-922:44|108|3|0","type":37,"uses":[],"kind":253,"storage":1},{"id":52,"usr":10991056972410635462,"detailed_name":"vex::mevent &vex::accelerometer::CHANGED","short_name_offset":33,"short_name_size":7,"hover":"vex::mevent &vex::accelerometer::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"935:17-935:24|27|2|2","extent":"935:9-935:37|27|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":53,"usr":7048639752029292949,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"972:39-972:44|113|3|2","extent":"972:26-972:44|113|3|0","type":37,"uses":[],"kind":253,"storage":1},{"id":54,"usr":9159364262388130210,"detailed_name":"vex::mevent &vex::analog_in::CHANGED","short_name_offset":29,"short_name_size":7,"hover":"vex::mevent &vex::analog_in::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"985:17-985:24|28|2|2","extent":"985:9-985:37|28|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":55,"usr":9756895979848178309,"detailed_name":"vex::mevent &vex::encoder::CHANGED","short_name_offset":27,"short_name_size":7,"hover":"vex::mevent &vex::encoder::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"1064:17-1064:24|29|2|2","extent":"1064:9-1064:37|29|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":56,"usr":4032262108504887027,"detailed_name":"vex::mevent &vex::sonar::CHANGED","short_name_offset":25,"short_name_size":7,"hover":"vex::mevent &vex::sonar::CHANGED   = _CHANGED","comments":"","declarations":[],"spell":"1113:17-1113:24|30|2|2","extent":"1113:9-1113:37|30|2|0","type":18,"uses":[],"kind":8,"storage":0},{"id":57,"usr":10530517831208363310,"detailed_name":"int32_t value","short_name_offset":8,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1190:37-1190:42|137|3|2","extent":"1190:29-1190:42|137|3|0","type":9,"uses":["1191:20-1191:25|137|3|4"],"kind":253,"storage":1},{"id":58,"usr":2312065312444327335,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1190:57-1190:62|137|3|2","extent":"1190:44-1190:62|137|3|0","type":37,"uses":["1191:27-1191:32|137|3|4"],"kind":253,"storage":1},{"id":59,"usr":7390317409024571005,"detailed_name":"double value","short_name_offset":7,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1203:36-1203:41|138|3|2","extent":"1203:29-1203:41|138|3|0","type":38,"uses":["1204:20-1204:25|138|3|4"],"kind":253,"storage":1},{"id":60,"usr":17751675651338563712,"detailed_name":"vex::rotationUnits units","short_name_offset":19,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1203:57-1203:62|138|3|2","extent":"1203:43-1203:62|138|3|0","type":15,"uses":["1204:27-1204:32|138|3|4"],"kind":253,"storage":1},{"id":61,"usr":3697118674078239620,"detailed_name":"bool vex::motor29::_reversed","short_name_offset":19,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1213:17-1213:26|33|2|2","extent":"1213:9-1213:26|33|2|0","type":39,"uses":[],"kind":8,"storage":0},{"id":62,"usr":4933083743260474487,"detailed_name":"int32_t vex::motor29::_velocity","short_name_offset":22,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1214:17-1214:26|33|2|2","extent":"1214:9-1214:26|33|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":63,"usr":15897678743678359575,"detailed_name":"bool vex::motor29::_spinMode","short_name_offset":19,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1215:17-1215:26|33|2|2","extent":"1215:9-1215:26|33|2|0","type":39,"uses":[],"kind":8,"storage":0},{"id":64,"usr":7514791552899927219,"detailed_name":"vex::directionType dir","short_name_offset":19,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1280:34-1280:37|146|3|2","extent":"1280:20-1280:37|146|3|0","type":40,"uses":["1281:19-1281:22|146|3|4"],"kind":253,"storage":1},{"id":65,"usr":17577327274389128235,"detailed_name":"double velocity","short_name_offset":7,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1280:46-1280:54|146|3|2","extent":"1280:39-1280:54|146|3|0","type":38,"uses":["1281:24-1281:32|146|3|4"],"kind":253,"storage":1},{"id":66,"usr":2055379453973004993,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1280:69-1280:74|146|3|2","extent":"1280:56-1280:74|146|3|0","type":37,"uses":["1281:61-1281:66|146|3|4"],"kind":253,"storage":1},{"id":67,"usr":4518713813949052812,"detailed_name":"bool vex::motor_victor::_reversed","short_name_offset":24,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1298:17-1298:26|34|2|2","extent":"1298:9-1298:26|34|2|0","type":39,"uses":[],"kind":8,"storage":0},{"id":68,"usr":12241201190203776052,"detailed_name":"int32_t vex::motor_victor::_velocity","short_name_offset":27,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1299:17-1299:26|34|2|2","extent":"1299:9-1299:26|34|2|0","type":9,"uses":[],"kind":8,"storage":0},{"id":69,"usr":15599322639031159995,"detailed_name":"bool vex::motor_victor::_spinMode","short_name_offset":24,"short_name_size":9,"hover":"","comments":"","declarations":[],"spell":"1300:17-1300:26|34|2|2","extent":"1300:9-1300:26|34|2|0","type":39,"uses":[],"kind":8,"storage":0},{"id":70,"usr":10855030951773308378,"detailed_name":"vex::directionType dir","short_name_offset":19,"short_name_size":3,"hover":"","comments":"","declarations":[],"spell":"1365:34-1365:37|155|3|2","extent":"1365:20-1365:37|155|3|0","type":40,"uses":["1366:19-1366:22|155|3|4"],"kind":253,"storage":1},{"id":71,"usr":124381605125329105,"detailed_name":"double velocity","short_name_offset":7,"short_name_size":8,"hover":"","comments":"","declarations":[],"spell":"1365:46-1365:54|155|3|2","extent":"1365:39-1365:54|155|3|0","type":38,"uses":["1366:24-1366:32|155|3|4"],"kind":253,"storage":1},{"id":72,"usr":14518001560885726500,"detailed_name":"vex::percentUnits units","short_name_offset":18,"short_name_size":5,"hover":"","comments":"","declarations":[],"spell":"1365:69-1365:74|155|3|2","extent":"1365:56-1365:74|155|3|0","type":37,"uses":["1366:61-1366:66|155|3|4"],"kind":253,"storage":1},{"id":73,"usr":7655572542278676376,"detailed_name":"VCS_TRIPORT_CLASS_H","short_name_offset":0,"short_name_size":19,"hover":"#define VCS_TRIPORT_CLASS_H","comments":"","declarations":[],"spell":"20:11-20:30|-1|1|2","extent":"20:11-20:30|-1|1|0","uses":[],"kind":255,"storage":0},{"id":74,"usr":291038054068649371,"detailed_name":"","short_name_offset":0,"short_name_size":0,"hover":"","comments":"","declarations":[],"uses":["87:73-87:77|-1|1|4"],"kind":0,"storage":0}]}